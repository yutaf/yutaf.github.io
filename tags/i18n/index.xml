<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>I18n on yutaf blog</title>
    <link>http://localhost:1313/tags/i18n/</link>
    <description>Recent content in I18n on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Fri, 24 Jun 2016 13:33:48 +0900</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/i18n/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Translate csrf validation message in symfony form component</title>
      <link>http://localhost:1313/translate-csrf-validation-message-in-symfony-form-component/</link>
      <pubDate>Fri, 24 Jun 2016 13:33:48 +0900</pubDate>
      <guid>http://localhost:1313/translate-csrf-validation-message-in-symfony-form-component/</guid>
      <description>I was stuck for a while.&#xA;You need to pass translator instance(also domain as needed) as an argument when you instantiate CsrfExtension.&#xA;php&#xA;use Symfony\Component\Form\Extension\Csrf\CsrfExtension; use Symfony\Component\Form\Forms; ... $csrfExtension = new CsrfExtension($csrfTokenManager, $translator, &amp;#39;validators&amp;#39;); $formFactory = Forms::createFormFactoryBuilder() -&amp;gt;addExtensions([$csrfExtension]) -&amp;gt;getFormFactory(); ... I wrote about internationalization of symfony validation component in older post,&#xA;however it seems each form extensions should be passed the Translator instance individually.&#xA;use Symfony\Component\Form\Extension\Csrf\CsrfExtension; use Symfony\Component\Form\Extension\Validator\ValidatorExtension; use Symfony\Component\Form\Forms; use Symfony\Component\Security\Csrf\CsrfTokenManager; use Symfony\Component\Translation\Translator; use Symfony\Component\Validator\Validation; .</description>
    </item>
    <item>
      <title>Internationalize symfony validation component outside of symfony framework</title>
      <link>http://localhost:1313/internationalize-symfony-validation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 19 Jun 2016 13:35:28 +0900</pubDate>
      <guid>http://localhost:1313/internationalize-symfony-validation-component-outside-of-symfony-framework/</guid>
      <description>It took me several hours to make it, Symfony validation component Internationalization.&#xA;The point is instantiation of translator and validator.&#xA;composer.json&#xA;{ &amp;#34;require&amp;#34; : { &amp;#34;twig/twig&amp;#34;: &amp;#34;~1.0&amp;#34;, &amp;#34;symfony/translation&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/twig-bridge&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/config&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/form&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/validator&amp;#34;: &amp;#34;^3.1&amp;#34;, }, } php&#xA;use Symfony\Component\Translation\Translator; use Symfony\Component\Translation\MessageSelector; use Symfony\Component\Translation\Loader\XliffFileLoader use Symfony\Component\Validator\Validation; use Symfony\Component\Form\Extension\Validator\ValidatorExtension; $translator = new Translator($locale, new MessageSelector()); $vendorDir = realpath(__DIR__.&amp;#39;/../vendor&amp;#39;); $vendorFormDir = $vendorDir.&amp;#39;/symfony/form&amp;#39;; $vendorValidatorDir = $vendorDir.&amp;#39;/symfony/validator&amp;#39;; $translator-&amp;gt;addLoader(&amp;#39;xlf&amp;#39;, new XliffFileLoader()); // there are built-in translations for the core error messages $translator-&amp;gt;addResource(&amp;#39;xlf&amp;#39;, $vendorFormDir.</description>
    </item>
    <item>
      <title>php i18n with twig and symfony translation component outside of symfony framework</title>
      <link>http://localhost:1313/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 05 Jun 2016 14:47:30 +0900</pubDate>
      <guid>http://localhost:1313/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</guid>
      <description>composer.json&#xA;{ &amp;#34;require&amp;#34; : { &amp;#34;twig/twig&amp;#34;: &amp;#34;~1.0&amp;#34;, &amp;#34;symfony/translation&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/twig-bridge&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/config&amp;#34;: &amp;#34;^3.1&amp;#34;, &amp;#34;symfony/yaml&amp;#34;: &amp;#34;^3.1&amp;#34; }, } php&#xA;$loader = new Twig_Loader_Filesystem(__DIR__.&amp;#39;/../templates&amp;#39;); $twig = new Twig_Environment($loader); $locale = &amp;#39;en&amp;#39;; if(isset($_SERVER[&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;]) &amp;amp;&amp;amp; strlen($_SERVER[&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;])&amp;gt;0) { $locale = substr($_SERVER[&amp;#39;HTTP_ACCEPT_LANGUAGE&amp;#39;], 0, 2); } $translator = new Symfony\Component\Translation\Translator($locale, new \Symfony\Component\Translation\MessageSelector()); $translator-&amp;gt;setFallbackLocales([&amp;#39;en&amp;#39;]); $translator-&amp;gt;addLoader(&amp;#39;yaml&amp;#39;, new Symfony\Component\Translation\Loader\YamlFileLoader()); $translator-&amp;gt;addResource(&amp;#39;yaml&amp;#39;, __DIR__.&amp;#39;/../locales/en.yml&amp;#39;, &amp;#39;en&amp;#39;); $translator-&amp;gt;addResource(&amp;#39;yaml&amp;#39;, __DIR__.&amp;#39;/../locales/ja.yml&amp;#39;, &amp;#39;ja&amp;#39;); $twig-&amp;gt;addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($translator)); $data = [&amp;#39;somethig&amp;#39; =&amp;gt; &amp;#39;abcd&amp;#39;]; $twig-&amp;gt;render(&amp;#34;hello.html&amp;#34;, $data); yml&#xA;foo: FOO html&#xA;&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;p&amp;gt;{{ &amp;#39;foo&amp;#39;|trans }}&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; output</description>
    </item>
  </channel>
</rss>
