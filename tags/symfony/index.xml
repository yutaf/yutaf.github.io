<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Symfony on yutaf blog</title>
    <link>http://yutaf.github.io/tags/symfony/</link>
    <description>Recent content in Symfony on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Fri, 24 Jun 2016 11:16:11 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/tags/symfony/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Password confirmation form with symfony</title>
      <link>http://yutaf.github.io/password-confirmation-form-with-symfony/</link>
      <pubDate>Fri, 24 Jun 2016 11:16:11 +0900</pubDate>
      
      <guid>http://yutaf.github.io/password-confirmation-form-with-symfony/</guid>
      <description>&lt;p&gt;I was so impressed it goes very easy.&lt;br /&gt;
&lt;em&gt;RepeatedType Field&lt;/em&gt; helps us to create password &amp;amp; password confirmation fields.&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/reference/forms/types/repeated.html&#34;&gt;http://symfony.com/doc/current/reference/forms/types/repeated.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, RepeatedType::class, array(
        &#39;type&#39; =&amp;gt; PasswordType::class,
        &#39;required&#39; =&amp;gt; true,
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        &#39;first_options&#39;  =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.password&#39;),
        &#39;second_options&#39; =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.passwordConfirmation&#39;),
        ))
  -&amp;gt;getForm();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will have password confirmation fields with their matching validation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internationalize symfony validation component outside of symfony framework</title>
      <link>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 19 Jun 2016 13:35:28 +0900</pubDate>
      
      <guid>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;It took me several hours to make it, Symfony validation component Internationalization.&lt;br /&gt;
The point is instantiation of &lt;code&gt;translator&lt;/code&gt; and &lt;code&gt;validator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/form&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/validator&amp;quot;: &amp;quot;^3.1&amp;quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Symfony\Component\Translation\Translator;
use Symfony\Component\Translation\MessageSelector;
use Symfony\Component\Translation\Loader\XliffFileLoader
use Symfony\Component\Validator\Validation;
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;

$translator = new Translator($locale, new MessageSelector());

$vendorDir = realpath(__DIR__.&#39;/../vendor&#39;);
$vendorFormDir = $vendorDir.&#39;/symfony/form&#39;;
$vendorValidatorDir = $vendorDir.&#39;/symfony/validator&#39;;

$translator-&amp;gt;addLoader(&#39;xlf&#39;, new XliffFileLoader());
// there are built-in translations for the core error messages
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, PasswordType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        ))
  -&amp;gt;getForm();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important that you specify &lt;code&gt;validators&lt;/code&gt; as the domain, 4th argument of &lt;code&gt;addResource&lt;/code&gt; method.&lt;br /&gt;
And it should correspond to the validator&amp;rsquo;s domain, which is specified with &lt;code&gt;setTranslationDomain&lt;/code&gt; method.&lt;br /&gt;
You have to pass translator instance to the validator, too.&lt;/p&gt;

&lt;p&gt;Please see the documentation if you want further explanation for domain.
&lt;a href=&#34;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&#34;&gt;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;br /&gt;
You already have form with internationalized validation messages.&lt;/p&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/components/form/introduction.html#translation&#34;&gt;http://symfony.com/doc/current/components/form/introduction.html#translation&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/16063531/translation-in-validator-component&#34;&gt;http://stackoverflow.com/questions/16063531/translation-in-validator-component&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php i18n with twig and symfony translation component outside of symfony framework</title>
      <link>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 05 Jun 2016 14:47:30 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/yaml&amp;quot;: &amp;quot;^3.1&amp;quot;
  },
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$loader = new Twig_Loader_Filesystem(__DIR__.&#39;/../templates&#39;);
$twig = new Twig_Environment($loader);

$locale = &#39;en&#39;;
if(isset($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]) &amp;amp;&amp;amp; strlen($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;])&amp;gt;0) {
  $locale = substr($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;], 0, 2);
}
$translator = new Symfony\Component\Translation\Translator($locale, new \Symfony\Component\Translation\MessageSelector());
$translator-&amp;gt;setFallbackLocales([&#39;en&#39;]);
$translator-&amp;gt;addLoader(&#39;yaml&#39;, new Symfony\Component\Translation\Loader\YamlFileLoader());
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/en.yml&#39;, &#39;en&#39;);
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/ja.yml&#39;, &#39;ja&#39;);

$twig-&amp;gt;addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($translator));
$data = [&#39;somethig&#39; =&amp;gt; &#39;abcd&#39;];
$twig-&amp;gt;render(&amp;quot;hello.html&amp;quot;, $data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo: FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;{{ &#39;foo&#39;|trans }}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/2bard/4329452&#34;&gt;https://gist.github.com/2bard/4329452&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/twig.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/twig.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/translation.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/translation.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>