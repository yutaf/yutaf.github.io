<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ryogoku on yutaf blog</title>
    <link>http://yutaf.github.io/tags/ryogoku/</link>
    <description>Recent content in Ryogoku on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Thu, 30 Apr 2015 18:14:33 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/tags/ryogoku/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>第89回 PHP勉強会＠東京</title>
      <link>http://yutaf.github.io/php-study-89/</link>
      <pubDate>Thu, 30 Apr 2015 18:14:33 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-study-89/</guid>
      <description>

&lt;p&gt;先日、&lt;a href=&#34;http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/&#34;&gt;デプロイツールを作成したという記事&lt;/a&gt;を投稿したが、&lt;a href=&#34;https://phpstudy.doorkeeper.jp/events/23826&#34;&gt;第89回 PHP勉強会＠東京&lt;/a&gt; でそれについての発表を行った。&lt;/p&gt;

&lt;p&gt;当日の朝に自分が発表者になっていることに気づき、大急ぎで資料を準備して発表に臨んだ。&lt;br /&gt;
発表の段取りや分量など、かなり失敗して恥ずかしかったが、気付きもあったのでチャレンジしてよかった。&lt;br /&gt;
ちなみに、これは自分にとって初めての社外の人に向けた発表だった。&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/tIIytx7ajztnz5&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;発表を通じてわかったこと:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;発表の時間配分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本題に入る前に時間が終わるというひどい体たらくだった。&lt;br /&gt;
今後、リハーサルはしっかりやろう、自分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参加者のデプロイツール使用状況&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参加者の方のデプロイ状況を知りたかったので、発表中に聞いてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイツールを使っている人数&lt;br /&gt;
20-30 / 60 人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内訳&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;capistrano 95 %&lt;/li&gt;
&lt;li&gt;fabric 1人?&lt;/li&gt;
&lt;li&gt;rocketeer 1人?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんだかんだ capistrano 人気の根強さに驚いた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;質問&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;発表に対する質問も受けた。そのおかげで、デプロイに関してのポイントや自分が気づいていないところに気づけたので、質問者の方には感謝したい。&lt;br /&gt;
質問は本当に大事ですね。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;「既存のツールを使わないで、自分たちで作ったツールを使うメリットは？」&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
その時は上手く答えられなかったので、ここに書こうと思う。&lt;br /&gt;&lt;br /&gt;
メリットは、自分たちの仕事に最適化したツールが作れるということ。&lt;br /&gt;
既存のツールの不要な機能をそぎ落として、自分たちに必要な最低限のものを作れる。&lt;br /&gt;&lt;br /&gt;
デメリットは、しっかりメンテナンスをしなければならないこと。&lt;br /&gt;
スライド中にある、フロントツールのビルドに時間がかかるといった問題のように、時間の経過とともに出てくる問題に対処出来なければ使い続けていけるツールにならない。&lt;br /&gt;&lt;br /&gt;
また、既存のツールと違い、ネット上に情報が集積されていないので、作成者以外の人間が理解できるようドキュメントの整備は既存のツール以上にしっかりやらなければならない。&lt;br /&gt;&lt;br /&gt;
この辺りのことを考えると本当に一長一短で、 今後上手く行かなくなった時の選択肢として、 capistrano やその他の方法も考慮しておかなければと思っている。&lt;br /&gt;&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;「APC, OPcache を使用しているアプリケーションのデプロイは上手くいくか」&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
恥ずかしながら、APC, OPcache について知らなかった。&lt;br /&gt;
&lt;a href=&#34;https://www.xserver.ne.jp/manual/man_server_php_apc.php&#34;&gt;https://www.xserver.ne.jp/manual/man_server_php_apc.php&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;「APC」や「OPcache」とは、PHPの高速化、CPU負荷を軽減するための拡張モジュールです。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;これらの拡張機能においては、PHPの初回実行時に、PHPの内容を最適化した状態でキャッシュしておき、次回以降、同じPHPにアクセスがあった際にキャッシュを利用することで、PHP実行時のCPU負荷の軽減や、PHPの大幅な高速化を図ることが可能です。&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;
おそらくこの質問者の方が聞きたかったことに関連する記事もあった。&lt;br /&gt;
&lt;a href=&#34;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&#34;&gt;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;OPcacheはシンボリックを解決して、実ファイルパスの状態でキャッシュする。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;よってシンボリックリンクを更新しても、実ファイルパスのキャッシュが保持されてしまう。&lt;/code&gt;&lt;br /&gt;&lt;br /&gt;
つまり、capistrano のようなシンボリックリンクを切り替えることでデプロイを実現しているツールでは、OPcache のキャッシュの影響で最新のファイルが実行・表示されないという問題があるらしい。&lt;br /&gt;
もちろん、上記ブログではその解決策も記されている。&lt;br /&gt;
こういった問題があることは全く知らなかったので勉強になりました。&lt;br /&gt;&lt;br /&gt;
ryogoku に関して言えば、シンボリックリンクを張り替えず、実ファイルを上書きする作りになっているので、OPcache を使っていても問題にならない。&lt;br /&gt;&lt;br /&gt;
一方で考えたことは、OPcache を使うような高いパフォーマンスが求められるアプリケーションでは、シンボリックリンクを切り替えるタイプのゼロダウンタイムなデプロイが求められるのではないかということ。&lt;br /&gt;
そういったアプリケーションには ryogoku は不向きだと思った。&lt;br /&gt;&lt;br /&gt;
ryogoku が向いているのは、ゲームなどのリアルタイム性が強く求められるものでなく、静的なコンテンツやブログ、CMSなど、コンマ何秒間のダウンタイムが問題にならないものかと思う。&lt;br /&gt;
言い換えれば、自分たちが普段仕事で開発しているアプリケーションがそういったもので、その範囲であれば ryogoku は十分なツールだと思っている。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;「ロールバックはどうしている？」&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
ryogoku には revert というコマンドがあり、それでロールバックを実現している。&lt;br /&gt;
このコマンドの実際の動作がどうなっているかというと、戻りたいgit の commit id を指定してデプロイしている。&lt;br /&gt;
つまり、バックアップからの復元でない。&lt;br /&gt;
大抵はこれで上手くロールバックできるが、正直、上手くいかなかったこともある。&lt;br /&gt;&lt;br /&gt;
細かい話になるので簡単に言いたいが、あるデプロイの前後を境に rsync の除外リストに含まれたファイルがあると、ロールバックしたときに不要なファイルがデプロイ先サーバーに残ってしまうことがある。&lt;br /&gt;
これは今後改善しなくてはと思っている。&lt;br /&gt;&lt;br /&gt;
ちなみに capistrano であれば、デプロイごとにアプリケーションをまるまるディレクトリごと作成して、シンボリックリンクを張り替えて対応しているので、ロールバックも過去のディレクトリにリンクを張り替えればいいだけなので、確実。&lt;br /&gt;&lt;br /&gt;
ただ、ryogoku をシンボリックリンクを張り替えるつくりにはしたくないので、なにか考えないといけない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;発表を通じてわかったこと-まとめ:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと・まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;勉強会は補欠になっていても、繰り上がって発表者になることがあるので、準備はしておく&lt;/li&gt;
&lt;li&gt;自作ツールは自分たちの仕事に合わせた細かい調整が利くが、メンテナンスやドキュメント整備を続ける責任がある&lt;/li&gt;
&lt;li&gt;ryogoku は静的なコンテンツやブログ、CMS といったコンマ何秒程度のダウンタイムを気にしなくていいアプリケーションのデプロイに向いている&lt;/li&gt;
&lt;li&gt;ryogoku のロールバックには改善の余地あり&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>I made a deployment tool - ryogoku</title>
      <link>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</link>
      <pubDate>Wed, 25 Mar 2015 23:11:48 +0900</pubDate>
      
      <guid>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</guid>
      <description>

&lt;p&gt;rsync によるデプロイツール・&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt; を作成した。&lt;br /&gt;
I made a deployment tool, &lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt;.&lt;br /&gt;
It uses &lt;code&gt;rsync&lt;/code&gt; to deploy.&lt;/p&gt;

&lt;h2 id=&#34;why:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;why&lt;/h2&gt;

&lt;p&gt;会社でデプロイの自動化を進めており、何か良いツールはないか探していた。&lt;br /&gt;
ちなみに自分の会社は以下の様な条件での仕事が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受託業務中心。納品するのは php アプリケーション&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;プロダクション・サーバーがクライアントの所有で自由にツール類をインストールできない。git や ruby 等が入っていないことが殆ど。&lt;/li&gt;
&lt;li&gt;web サーバー2台の db サーバー1台という小規模な構成が殆ど。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの条件に見合うようなデプロイツールを探して、色々情報を集めた。&lt;br /&gt;
特に参考になったのはこのページ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/naoya/20130118/1358477523&#34;&gt;開発メモ#1 : Cinnamon によるデプロイ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして、最終的には以下の様な理由で自作することにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano は複雑そう。また、php のアプリで ruby のツールを使いたくなかった。&lt;/li&gt;
&lt;li&gt;fabric も検討したが、デザイナー含めた他のメンバーに homebrew や pip 等のインストール作業をさせるのがハードルだと感じた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; というシェルスクリプトのデプロイツールを発見し、インストールが楽なこととシンプルな使い方がとても良いと感じた。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/futoase/items/c2ac39cfe28813b79bc4&#34;&gt;【個人メモ】デプロイするためにdeployを使ってみる&lt;/a&gt;&lt;br /&gt;
しかし、デプロイ先サーバーでの git インストールが必須な点と、複数台のホストに対して実行出来ない点が自分の目的とそぐわなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上から、&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; をベースに、殆どの unix マシンで使用可能な rsync 使ったツールを作成することにした。&lt;/p&gt;

&lt;p&gt;I wanted simple deployment tool suitable for my work.&lt;br /&gt;
My work is like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making php applications that are outsourced from various clients.&lt;/li&gt;
&lt;li&gt;Production servers are properties of clients, and softwares like git or ruby are rarely installed in them.&lt;br /&gt;
And also I am not permitted to install softwares.&lt;/li&gt;
&lt;li&gt;Server cluster is consisted of 2 web servers and 1 database server in most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started searching tools to match these conditions.&lt;br /&gt;
But I eventually decide to make my own one after a while surfing the web.&lt;br /&gt;
Because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano seemed to be too complicated.&lt;/li&gt;
&lt;li&gt;fabric seemed much better than capistrano, but I thought it was still hard for my team to install homebrew or pip things.&lt;/li&gt;
&lt;li&gt;I found &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; on github.&lt;br /&gt;
that&amp;rsquo;s cool deployment tool because installation and usage were very simpler than others.&lt;br /&gt;
But it requires git to be installed in deployment servers and doesn&amp;rsquo;t support deployment to multiple hosts.&lt;br /&gt;
That didn&amp;rsquo;t match my purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to make my own one based on &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;br /&gt;
Thank you, &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-it-is-like-ryogoku:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;What it is like - ryogoku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;https://github.com/yutaf/ryogoku&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Clone the repository from github, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/ryogoku-01.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuration:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ryogoku.conf&lt;/code&gt; を git レポジトリルートに作成し、以下の様な内容を書く。&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;ryogoku.conf&lt;/code&gt; at the git repository root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[prod]
user rob
host 128.199.170.128 128.199.244.193
path /var/www/html
ref master
pre-rsync ./bin/pre-rsync
post-deploy /var/www/html/bin/update.sh &amp;amp;&amp;amp; /var/www/html/bin/update.prod.sh
umask 002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容について簡単に説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイ先は&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; はデプロイする git のリビジョンを指定&lt;br /&gt;
コマンドライン引数での指定も可能で、その場合はコマンドライン引数の値が優先される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; は rsync を行う前に実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; は rsync を行ったあとに実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; はファイルパーミッションを設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What directives in this configuration file means are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deploying to&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; is the git revision to be deployed.&lt;br /&gt;
This value can also be set by command line argument, which is prior to config one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; defines commands that are executed before rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; defines commands that are executed after rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; defines the file permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;execution:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Execution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、master リビジョンが prod で指定したホストにデプロイされる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;master&lt;/code&gt; revision is deployed to the hosts defined in &lt;code&gt;prod&lt;/code&gt; section by this command.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;git リビジョンを指定する場合は、コマンドラインの引数に渡す。&lt;/p&gt;

&lt;p&gt;If you want to deploy specific revision, you can pass an argument to command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod HEAD^^
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod b7ea7b3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod 1.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod develop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>