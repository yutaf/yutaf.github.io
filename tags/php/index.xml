<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on yutaf blog</title>
    <link>http://yutaf.github.io/tags/php/</link>
    <description>Recent content in Php on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Fri, 24 Jun 2016 11:16:11 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Password confirmation form with symfony</title>
      <link>http://yutaf.github.io/password-confirmation-form-with-symfony/</link>
      <pubDate>Fri, 24 Jun 2016 11:16:11 +0900</pubDate>
      
      <guid>http://yutaf.github.io/password-confirmation-form-with-symfony/</guid>
      <description>&lt;p&gt;I was so impressed it goes very easy.&lt;br /&gt;
&lt;em&gt;RepeatedType Field&lt;/em&gt; helps us to create password &amp;amp; password confirmation fields.&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/reference/forms/types/repeated.html&#34;&gt;http://symfony.com/doc/current/reference/forms/types/repeated.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, RepeatedType::class, array(
        &#39;type&#39; =&amp;gt; PasswordType::class,
        &#39;required&#39; =&amp;gt; true,
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        &#39;first_options&#39;  =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.password&#39;),
        &#39;second_options&#39; =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.passwordConfirmation&#39;),
        ))
  -&amp;gt;getForm();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will have password confirmation fields with their matching validation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internationalize symfony validation component outside of symfony framework</title>
      <link>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 19 Jun 2016 13:35:28 +0900</pubDate>
      
      <guid>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;It took me several hours to make it, Symfony validation component Internationalization.&lt;br /&gt;
The point is instantiation of &lt;code&gt;translator&lt;/code&gt; and &lt;code&gt;validator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/form&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/validator&amp;quot;: &amp;quot;^3.1&amp;quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Symfony\Component\Translation\Translator;
use Symfony\Component\Translation\MessageSelector;
use Symfony\Component\Translation\Loader\XliffFileLoader
use Symfony\Component\Validator\Validation;
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;

$translator = new Translator($locale, new MessageSelector());

$vendorDir = realpath(__DIR__.&#39;/../vendor&#39;);
$vendorFormDir = $vendorDir.&#39;/symfony/form&#39;;
$vendorValidatorDir = $vendorDir.&#39;/symfony/validator&#39;;

$translator-&amp;gt;addLoader(&#39;xlf&#39;, new XliffFileLoader());
// there are built-in translations for the core error messages
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, PasswordType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        ))
  -&amp;gt;getForm();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important that you specify &lt;code&gt;validators&lt;/code&gt; as the domain, 4th argument of &lt;code&gt;addResource&lt;/code&gt; method.&lt;br /&gt;
And it should correspond to the validator&amp;rsquo;s domain, which is specified with &lt;code&gt;setTranslationDomain&lt;/code&gt; method.&lt;br /&gt;
You have to pass translator instance to the validator, too.&lt;/p&gt;

&lt;p&gt;Please see the documentation if you want further explanation for domain.
&lt;a href=&#34;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&#34;&gt;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;br /&gt;
You already have form with internationalized validation messages.&lt;/p&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/components/form/introduction.html#translation&#34;&gt;http://symfony.com/doc/current/components/form/introduction.html#translation&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/16063531/translation-in-validator-component&#34;&gt;http://stackoverflow.com/questions/16063531/translation-in-validator-component&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php i18n with twig and symfony translation component outside of symfony framework</title>
      <link>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 05 Jun 2016 14:47:30 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/yaml&amp;quot;: &amp;quot;^3.1&amp;quot;
  },
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$loader = new Twig_Loader_Filesystem(__DIR__.&#39;/../templates&#39;);
$twig = new Twig_Environment($loader);

$locale = &#39;en&#39;;
if(isset($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]) &amp;amp;&amp;amp; strlen($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;])&amp;gt;0) {
  $locale = substr($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;], 0, 2);
}
$translator = new Symfony\Component\Translation\Translator($locale, new \Symfony\Component\Translation\MessageSelector());
$translator-&amp;gt;setFallbackLocales([&#39;en&#39;]);
$translator-&amp;gt;addLoader(&#39;yaml&#39;, new Symfony\Component\Translation\Loader\YamlFileLoader());
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/en.yml&#39;, &#39;en&#39;);
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/ja.yml&#39;, &#39;ja&#39;);

$twig-&amp;gt;addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($translator));
$data = [&#39;somethig&#39; =&amp;gt; &#39;abcd&#39;];
$twig-&amp;gt;render(&amp;quot;hello.html&amp;quot;, $data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo: FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;{{ &#39;foo&#39;|trans }}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/2bard/4329452&#34;&gt;https://gist.github.com/2bard/4329452&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/twig.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/twig.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/translation.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/translation.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php max_input_vars makes you lose form values</title>
      <link>http://yutaf.github.io/php-max-input-vars/</link>
      <pubDate>Tue, 19 May 2015 14:55:52 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-max-input-vars/</guid>
      <description>&lt;p&gt;ie(11) でのみ form で送られるべき値が送られてこないということが起きた。&lt;br /&gt;
最初は js のバグかと思っていたが、php の設定が問題だった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.softel.co.jp/blogs/tech/archives/3591&#34;&gt;【php】max_input_varsの影響でフォームの値を全部受け取れないことがある   at softelメモ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;問題
フォームから送信した値が、サーバー側（php）で取得できない。

プログラムは動いてるみたいなんだけど、あるはずの $_REQUEST[‘hoge’] などがないみたい。

どうなってるのこれ？

答え
以下の条件に当てはまるようなら、phpのmax_input_varsの設定値の影響かもしれない。

...

max_input_vars integer

入力変数を最大で何個まで受け付けるかを指定します 
(この制限は、スーパーグローバル $_GET、$_POST そして $_COOKIE にそれぞれ個別に適用されます)。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対象サーバーの &lt;code&gt;max_input_vars&lt;/code&gt; は 150 だったので、300 まで上げた。&lt;br /&gt;
解決した。&lt;/p&gt;

&lt;p&gt;それにしても ie(11) だけで起こった理由がわからない。&lt;br /&gt;
他のブラウザよりも多くのフォーム値を送信しているということ？&lt;/p&gt;

&lt;p&gt;同じ実装ではないが、次のような記事を見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hack.aipo.com/archives/5998/&#34;&gt;inputタグのonclickでform.submit()を実行しているため、IEだけ二重にリクエストが送信される時の対処法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この対処法は自分の場合は有効でなかった。&lt;br /&gt;
とりあえず、&lt;code&gt;max_input_vars&lt;/code&gt; の値には気をつける。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第89回 PHP勉強会＠東京</title>
      <link>http://yutaf.github.io/php-study-89/</link>
      <pubDate>Thu, 30 Apr 2015 18:14:33 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-study-89/</guid>
      <description>

&lt;p&gt;先日、&lt;a href=&#34;http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/&#34;&gt;デプロイツールを作成したという記事&lt;/a&gt;を投稿したが、&lt;a href=&#34;https://phpstudy.doorkeeper.jp/events/23826&#34;&gt;第89回 PHP勉強会＠東京&lt;/a&gt; でそれについての発表を行った。&lt;/p&gt;

&lt;p&gt;当日の朝に自分が発表者になっていることに気づき、大急ぎで資料を準備して発表に臨んだ。&lt;br /&gt;
結果、資料の完成度の低さ、発表の段取りや分量など、かなり失敗して恥ずかしかったが、気付きもあったのでチャレンジしてよかった。&lt;br /&gt;
ちなみに、これは自分にとって初めての社外の人に向けた発表だった。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a57e354b64c9494eb03f30e5a38afa27&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;発表を通じてわかったこと:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;発表の時間配分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本題に入る前に時間が終わるというひどい体たらくだった。&lt;br /&gt;
今後、リハーサルはしっかりやろう、自分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参加者のデプロイツール使用状況&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参加者の方のデプロイ状況を知りたかったので、発表中に聞いてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイツールを使っている人数&lt;br /&gt;
20-30 / 60 人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内訳&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;capistrano 95 %&lt;/li&gt;
&lt;li&gt;fabric 1人?&lt;/li&gt;
&lt;li&gt;rocketeer 1人?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんだかんだ capistrano 人気の根強さに驚いた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;質問&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;発表に対する質問も受けた。そのおかげで、デプロイに関してのポイントや自分が気づいていないところに気づけたので、質問者の方には感謝したい。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「既存のツールを使わないで、自分たちで作ったツールを使うメリットは？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;その時は上手く答えられなかったので、ここに書こうと思う。&lt;/p&gt;

&lt;p&gt;メリットは、自分たちの仕事に最適化したツールが作れるということ。&lt;br /&gt;
既存のツールの不要な機能をそぎ落として、自分たちに必要な最低限のものを作れる。&lt;/p&gt;

&lt;p&gt;デメリットは、しっかりメンテナンスをしなければならないこと。&lt;br /&gt;
スライド中にある、フロントツールのビルドに時間がかかるといった問題のように、時間の経過とともに出てくる問題に対処出来なければ使い続けていけるツールにならない。&lt;/p&gt;

&lt;p&gt;また、既存のツールと違い、ネット上に情報が集積されていないので、作成者以外の人間が理解できるようドキュメントの整備は既存のツール以上にしっかりやらなければならない。&lt;/p&gt;

&lt;p&gt;この辺りのことを考えると本当に一長一短で、 今後上手く行かなくなった時の選択肢として、 capistrano やその他の方法も考慮しておかなければと思っている。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「APC, OPcache を使用しているアプリケーションのデプロイは上手くいくか」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;恥ずかしながら、APC, OPcache について知らなかった。&lt;br /&gt;
&lt;a href=&#34;https://www.xserver.ne.jp/manual/man_server_php_apc.php&#34;&gt;https://www.xserver.ne.jp/manual/man_server_php_apc.php&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;「APC」や「OPcache」とは、PHPの高速化、CPU負荷を軽減するための拡張モジュールです。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;これらの拡張機能においては、PHPの初回実行時に、PHPの内容を最適化した状態でキャッシュしておき、次回以降、同じPHPにアクセスがあった際にキャッシュを利用することで、PHP実行時のCPU負荷の軽減や、PHPの大幅な高速化を図ることが可能です。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;おそらくこの質問者の方が聞きたかったことに関連する記事もあった。&lt;br /&gt;
&lt;a href=&#34;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&#34;&gt;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;OPcacheはシンボリックを解決して、実ファイルパスの状態でキャッシュする。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;よってシンボリックリンクを更新しても、実ファイルパスのキャッシュが保持されてしまう。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;つまり、capistrano のようなシンボリックリンクを切り替えることでデプロイを実現しているツールでは、OPcache のキャッシュの影響で最新のファイルが実行・表示されないという問題があるらしい。&lt;br /&gt;
もちろん、上記ブログではその解決策も記されている。&lt;br /&gt;
こういった問題があることは全く知らなかったので勉強になった。&lt;/p&gt;

&lt;p&gt;ryogoku に関して言えば、シンボリックリンクを張り替えず、実ファイルを上書きする作りになっているので、OPcache を使っていても問題にならない。&lt;/p&gt;

&lt;p&gt;一方で考えたことは、OPcache を使うような高いパフォーマンスが求められるアプリケーションでは、シンボリックリンクを切り替えるタイプのゼロダウンタイムなデプロイが求められるのではないかということ。&lt;br /&gt;
そういったアプリケーションには ryogoku は不向きだと思った。&lt;/p&gt;

&lt;p&gt;逆にどんなものが向いているか考えると、静的なコンテンツやブログ、CMSなど、コンマ何秒間のダウンタイムが問題にならないものかと思う。&lt;br /&gt;
言い換えれば、自分たちが普段仕事で開発しているアプリケーションがそういったもので、その範囲であれば ryogoku は十分なツールだと思っている。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「ロールバックはどうしている？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ryogoku には revert というコマンドがあり、それでロールバックを実現している。&lt;br /&gt;
このコマンドの実際の動作がどうなっているかというと、戻りたいgit の commit id を指定してデプロイしている。&lt;br /&gt;
つまり、バックアップからの復元でない。&lt;br /&gt;
大抵はこれで上手くロールバックできるが、正直、上手くいかなかったこともある。&lt;/p&gt;

&lt;p&gt;細かい話になるので簡単に言いたいが、あるデプロイを境に rsync の除外リストから外されたファイル(転送対象になったファイル)があると、ロールバックしたときに不要なファイルがデプロイ先サーバーに残ってしまうことがある。&lt;br /&gt;
これは今後改善しなくてはと思っている。&lt;/p&gt;

&lt;p&gt;ちなみに capistrano であれば、デプロイごとにアプリケーションをまるまるディレクトリごと作成して、シンボリックリンクを張り替えて対応しているので、ロールバックも過去のディレクトリにリンクを張り替えればいいだけなので、確実。&lt;/p&gt;

&lt;p&gt;ただ、ryogoku をシンボリックリンクを張り替えるつくりにはしたくないので、なにか考えないといけない。&lt;/p&gt;

&lt;h2 id=&#34;発表を通じてわかったこと-まとめ:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと・まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;勉強会は補欠になっていても、繰り上がって発表者になることもあるので笑、準備はしておくこと&lt;/li&gt;
&lt;li&gt;自作ツールは自分たちの仕事に合わせた細かい調整が利くが、メンテナンスやドキュメント整備を続ける責任がある&lt;/li&gt;
&lt;li&gt;ryogoku は静的なコンテンツやブログ、CMS といったコンマ何秒程度のダウンタイムを気にしなくていいアプリケーションのデプロイに向いている&lt;/li&gt;
&lt;li&gt;ryogoku のロールバックには改善の余地あり&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>phpbrew memo</title>
      <link>http://yutaf.github.io/phpbrew-memo/</link>
      <pubDate>Tue, 17 Feb 2015 12:32:23 +0900</pubDate>
      
      <guid>http://yutaf.github.io/phpbrew-memo/</guid>
      <description>

&lt;p&gt;ローカル開発環境に phpenv + php-build を使っていたが、&lt;a href=&#34;https://github.com/phpbrew/phpbrew&#34;&gt;phpbrew&lt;/a&gt; のほうが簡単そうだったので移行した。&lt;/p&gt;

&lt;h3 id=&#34;environment:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;environment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;osx 10.9.5&lt;/li&gt;
&lt;li&gt;Apache/2.2.29&lt;/li&gt;
&lt;li&gt;mysql 5.6.15&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;メリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;メリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;apache の php モジュールをバージョン毎に保存してくれる。&lt;/li&gt;
&lt;li&gt;configure オプションのコンパイルが楽になる（特にosx）

&lt;ul&gt;
&lt;li&gt;pcre&lt;/li&gt;
&lt;li&gt;&amp;ndash;enable-intl&lt;br /&gt;
など。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;デメリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;デメリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用するのに php5.3 以上が必要&lt;/li&gt;
&lt;li&gt;configure option を variants という独自の仕組みで指定する。&lt;/li&gt;
&lt;li&gt;php のバージョン切り替えで挙動が不安定な時がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requirement:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;Requirement&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Requirement&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Requirement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;phpbrew を利用するには php が必要。&lt;br /&gt;
osx はデフォルトで php がインストールされているので、osx ユーザーにはいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
$ chmod +x phpbrew
$ mv phpbrew /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-option-の設定と-php-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;configure option の設定と php のインストール&lt;/h2&gt;

&lt;p&gt;phpbrew には &lt;code&gt;variants&lt;/code&gt; という独自の configure option の指定方法がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants の一覧は以下のコマンドで確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew variants
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants を使うと、configure オプションによるビルドの失敗を上手く補ってくれるメリットがある。&lt;br /&gt;
例えば、&lt;code&gt;pcre&lt;/code&gt; オプションは以下の様な失敗をしやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;php の cli で動く pcre と apache モジュールで動く pcre のバージョンが違う&lt;/li&gt;
&lt;li&gt;apache に同梱された pcre がリンクされて、そのバージョンが古くてまともに動かない&lt;/li&gt;
&lt;li&gt;pcre ライブラリを指定しても、正しくリンクされない(個人的には osx でありました)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果として、&lt;code&gt;preg_replace&lt;/code&gt; 等、preg 系関数がまともに動かなくなってしまうことがある。&lt;/p&gt;

&lt;p&gt;しかし、この variants を使って pcre を指定すれば、apache モジュールと php cli で同じバージョンのちゃんと動く pcre ライブラリが入る。&lt;br /&gt;
これはかなりありがたい。&lt;br /&gt;
&lt;br&gt;
&lt;code&gt;--enable-intl&lt;/code&gt; もlinux に比べて osx では php のビルドがまともにいかないことが多いが、それもうまく補ってくれる。&lt;br /&gt;
&lt;br&gt;
ちなみに、&lt;code&gt;--&lt;/code&gt; に続けて書けば通常の configure option の記述も可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +mysql +sqlite -- \
    --enable-ftp --apxs2=/opt/local/apache2/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ファイルによる-variants-の設定:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;ファイルによる variants の設定&lt;/h3&gt;

&lt;p&gt;yamlファイルで独自の variants を設定できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;config.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml:config.yaml&#34;&gt;variants:
  dev:
    bcmath:
    mbstring:
    intl:
    icu:
      - --with-icu-dir=/usr/local/opt/icu4c
    gettext:
      - --with-gettext=/usr/local/opt/gettext
    pcre:
    readline:
    xml:
      - --with-libxml-dir=/usr/local/opt/libxml2
    soap:
    zlib:
      - --with-zlib=/usr/local/opt/zlib
      - --with-zlib-dir=/usr/local/opt/zlib
    gd:
      - --with-gd
      - --with-jpeg-dir=/usr/local/opt/jpeg
      - --with-png-dir=/usr/local/opt/libpng
      - --with-freetype-dir=/usr/local/opt/freetype
      - --enable-gd-native-ttf
      - --enable-gd-jis-conv
    openssl:
    mcrypt:
    curl:
    mysql:
    pdo:
    my-exif:
      - --enable-exif
    my-config-file-path:
      - --with-config-file-path=/Users/yutaf/Sync/www/php.ini
extensions:
  dev:
    xdebug: stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yamlファイルを作成後、以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew init -c=/path/to/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルに記述されている &lt;code&gt;+dev&lt;/code&gt; variants を使用できるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;個人的ベストプラクティス:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;個人的ベストプラクティス&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +neutral +apxs2=/opt/apache2.2.29/bin/apxs +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+neutral&lt;/code&gt; を指定しないと &lt;code&gt;--disable-all&lt;/code&gt; 等のオプションが自動的に設定される。&lt;br /&gt;
&lt;code&gt;--disable-all&lt;/code&gt; は phpのデフォルトで有効な json や xml モジュール等が無効になるので、これらの関数が使用できなくなる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;+apxs2&#39;&lt;/code&gt; は apache の php モジュールをバージョン毎に管理する為に必須(後述)。&lt;/p&gt;

&lt;h2 id=&#34;extension-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;extension のインストール&lt;/h2&gt;

&lt;p&gt;xdebug などの extension も yaml ファイル に独自の variants を記述してインストールできる。&lt;br /&gt;
（上のyaml を参照。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew ext install +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-のバージョン切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;php のバージョン切り替え&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew switch php-5.4.36
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apache-のphpモジュール切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;apache のphpモジュール切り替え&lt;/h2&gt;

&lt;p&gt;variants の &lt;code&gt;+apxs2&lt;/code&gt; を設定すると各バージョンごとにモジュールを保存し、
httpd.conf に &lt;code&gt;LoadModule php5_module ...&lt;/code&gt; の記述がされる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、その際 conf と modules フォルダのパーミッションを 777 に変更するよう言われる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.29 +apxs2=/opt/apache2.2.29/bin/apxs
$ phpbrew install 5.4.36 +apxs2=/opt/apache2.2.29/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;作成されるモジュール&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;/opt/apache2.2.29/modules/libphp5.3.29.so
/opt/apache2.2.29/modules/libphp5.4.36.so

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;httpd.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを切り替えるには httpd.conf で使用するバージョンのモジュール以外をコメントアウトして apache を再起動する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
#LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apachectl graceful
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;感想:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;気持ち悪い所も多いが、osx でphpをビルドするならこれが一番楽な気がした。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>