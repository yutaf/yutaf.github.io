<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yutaf blog</title>
    <link>http://yutaf.github.io/</link>
    <description>Recent content on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Wed, 29 Apr 2015 13:04:40 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Paul Mccartney Japan Tour 04.27.15</title>
      <link>http://yutaf.github.io/paul-mccartney-japan-tour-042715/</link>
      <pubDate>Wed, 29 Apr 2015 13:04:40 +0900</pubDate>
      
      <guid>http://yutaf.github.io/paul-mccartney-japan-tour-042715/</guid>
      <description>&lt;p&gt;2公演観に行くうちの二回目。&lt;br /&gt;
この日は父と見に行った。&lt;br /&gt;
父は1950年生まれで、ビートルズ世代。&lt;br /&gt;
親孝行。笑&lt;/p&gt;

&lt;p&gt;I went with my dad this time.&lt;br /&gt;
Paul played &amp;ldquo;I Saw Her Standing There&amp;rdquo; !!&lt;br /&gt;
I danced to it.&lt;br /&gt;
It seemed my dad kept standing through the song.&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/VjzUWsgB4kk&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Set List&lt;br /&gt;
1. Magical Mystery Tour (The Beatles song)&lt;br /&gt;
2. Save Us&lt;br /&gt;
3. Can&amp;rsquo;t Buy Me Love (The Beatles song)&lt;br /&gt;
4. Listen to What the Man Said (Wings song)&lt;br /&gt;
5. Let Me Roll It (Wings song)&lt;br /&gt;
6. Paperback Writer (The Beatles song)&lt;br /&gt;
7. My Valentine&lt;br /&gt;
8. Nineteen Hundred and Eighty-Five (Wings song)&lt;br /&gt;
9. The Long and Winding Road (The Beatles song)&lt;br /&gt;
10. Maybe I&amp;rsquo;m Amazed&lt;br /&gt;
11. I&amp;rsquo;ve Just Seen a Face (The Beatles song)&lt;br /&gt;
12. We Can Work It Out (The Beatles song)&lt;br /&gt;
13. Another Day&lt;br /&gt;
14. Hope for the Future&lt;br /&gt;
15. And I Love Her (The Beatles song)&lt;br /&gt;
16. Blackbird (The Beatles song)&lt;br /&gt;
17. Here Today&lt;br /&gt;
18. New&lt;br /&gt;
19. Queenie Eye&lt;br /&gt;
20. Lady Madonna (The Beatles song)&lt;br /&gt;
21. All Together Now (The Beatles song)&lt;br /&gt;
22. Lovely Rita (The Beatles song)&lt;br /&gt;
23. Eleanor Rigby (The Beatles song)&lt;br /&gt;
24. Being for the Benefit of Mr. Kite! (The Beatles song)&lt;br /&gt;
25. Something (The Beatles song)&lt;br /&gt;
26. Ob-La-Di, Ob-La-Da (The Beatles song)&lt;br /&gt;
27. Band on the Run (Wings song)&lt;br /&gt;
28. Back in the U.S.S.R. (The Beatles song)&lt;br /&gt;
29. Let It Be (The Beatles song)&lt;br /&gt;
30. Live and Let Die (Wings song)&lt;br /&gt;
31. Hey Jude&lt;/p&gt;

&lt;p&gt;Encore:&lt;br /&gt;
32. Day Tripper (The Beatles song)&lt;br /&gt;
33. Hi, Hi, Hi (Wings song)&lt;br /&gt;
34. I Saw Her Standing There (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore 2:&lt;br /&gt;
35. Yesterday (The Beatles song)&lt;br /&gt;
36. Helter Skelter (The Beatles song)&lt;br /&gt;
37. Golden Slumbers (The Beatles song)&lt;br /&gt;
38. Carry That Weight (The Beatles song)&lt;br /&gt;
39. The End (The Beatles song)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paul McCartney Japan Tour 04.25.15</title>
      <link>http://yutaf.github.io/paul-mccartney-japan-tour-042515/</link>
      <pubDate>Sun, 26 Apr 2015 00:37:21 +0900</pubDate>
      
      <guid>http://yutaf.github.io/paul-mccartney-japan-tour-042515/</guid>
      <description>&lt;p&gt;2公演観に行くうちの一回目。&lt;br /&gt;
チケットは安くはないので2回も行く必要なかったんじゃないかと思っていたが、そんなことはなかった!!&lt;/p&gt;

&lt;p&gt;最高にロックしていて素晴らしかった。&lt;/p&gt;

&lt;p&gt;そして、観客のノリの良さがライブを特別なものにしていた。&lt;br /&gt;
会場全体からのポールに対する愛の強さが半端じゃない。&lt;/p&gt;

&lt;p&gt;個人的に一番良かった曲は &amp;ldquo;Maybe I&amp;rsquo;m Amazed&amp;rdquo;&lt;br /&gt;
2013年に聞けなかった &amp;ldquo;Jet&amp;rdquo; も聞けたので満足。&lt;/p&gt;

&lt;p&gt;月曜も楽しみ。&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/fOH7BCfY9DM&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/4qZsGnIoqug&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/dEyx7H1YXaA&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-01.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-02.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-03.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;Set list&lt;br /&gt;
1.  Eight Days a Week (The Beatles song)&lt;br /&gt;
2.  Save Us&lt;br /&gt;
3.  All My Loving (The Beatles song)&lt;br /&gt;
4.  Jet (Wings song)&lt;br /&gt;
5.  Let Me Roll It (Wings song)&lt;br /&gt;
6.  Paperback Writer (The Beatles song)&lt;br /&gt;
7.  My Valentine&lt;br /&gt;
8.  Nineteen Hundred and Eighty-Five (Wings song)&lt;br /&gt;
9.  The Long and Winding Road (The Beatles song)&lt;br /&gt;
10. Maybe I&amp;rsquo;m Amazed&lt;br /&gt;
11. I&amp;rsquo;ve Just Seen a Face (The Beatles song)&lt;br /&gt;
12. We Can Work It Out (The Beatles song)&lt;br /&gt;
13. Another Day&lt;br /&gt;
14. Hope for the Future&lt;br /&gt;
15. And I Love Her (The Beatles song)&lt;br /&gt;
16. Blackbird (The Beatles song)&lt;br /&gt;
17. Here Today&lt;br /&gt;
18. New&lt;br /&gt;
19. Queenie Eye&lt;br /&gt;
20. Lady Madonna (The Beatles song)&lt;br /&gt;
21. All Together Now (The Beatles song)&lt;br /&gt;
22. Lovely Rita (The Beatles song)&lt;br /&gt;
23. Eleanor Rigby (The Beatles song)&lt;br /&gt;
24. Being for the Benefit of Mr. Kite! (The Beatles song)&lt;br /&gt;
25. Something (The Beatles song)&lt;br /&gt;
26. Ob-La-Di, Ob-La-Da (The Beatles song)&lt;br /&gt;
27. Band on the Run (Wings song)&lt;br /&gt;
28. Back in the U.S.S.R. (The Beatles song)&lt;br /&gt;
29. Let It Be (The Beatles song)&lt;br /&gt;
30. Live and Let Die (Wings song)&lt;br /&gt;
31. Hey Jude (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore:&lt;br /&gt;
32. Day Tripper (The Beatles song)&lt;br /&gt;
33. Hi, Hi, Hi (Wings song)&lt;br /&gt;
34. Can&amp;rsquo;t Buy Me Love (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore 2:&lt;br /&gt;
35. Yesterday (The Beatles song)&lt;br /&gt;
36. Helter Skelter (The Beatles song)&lt;br /&gt;
37. Golden Slumbers (The Beatles song)&lt;br /&gt;
38. Carry That Weight (The Beatles song)&lt;br /&gt;
39. The End (The Beatles song)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>provisioning with itamae</title>
      <link>http://yutaf.github.io/provisioning-with-itamae/</link>
      <pubDate>Tue, 07 Apr 2015 22:42:50 +0900</pubDate>
      
      <guid>http://yutaf.github.io/provisioning-with-itamae/</guid>
      <description>

&lt;p&gt;I provisioned my company&amp;rsquo;s webhook server with &lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;itamae&lt;/a&gt; recently.&lt;br /&gt;
itamae is a &lt;em&gt;very simple&lt;/em&gt; provisioning tool created by &lt;a href=&#34;https://cookpad.com/en/categories/japanese-recipes&#34;&gt;cookpad&lt;/a&gt; and formerly they called it as Lightchef.&lt;/p&gt;

&lt;p&gt;I have never used provisioning tools like Chef or Ansible at all.&lt;br /&gt;
But I could learn itamae for 2,3 hours and began to provision.&lt;br /&gt;
It is very easy to start provisioning with itamae.&lt;br /&gt;
I like it.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-it:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;First of all we need &lt;code&gt;recipe&lt;/code&gt; to provision.&lt;br /&gt;
Here&amp;rsquo;s my recipe to install ruby with rbenv.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;recipes/ruby.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;install rbenv&amp;quot; do
  command &amp;quot;
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv &amp;amp;&amp;amp; \
    echo &#39;export PATH=\&amp;quot;$HOME/.rbenv/bin:$PATH\&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc  &amp;amp;&amp;amp; \
    echo &#39;eval \&amp;quot;$(rbenv init -)\&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
    git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  &amp;quot;
  not_if &amp;quot;test -d ~/.rbenv&amp;quot;
end
execute &amp;quot;install ruby&amp;quot; do
  command &amp;quot;rbenv install 2.2.1 &amp;amp;&amp;amp; rbenv global 2.2.1&amp;quot;
  not_if &amp;quot;test -d /root/.rbenv/versions/2.2.1&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute this recipe via ssh.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;itamae ssh -h 54.64.46.48 -u webhook recipes/ruby.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;details:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Details&lt;/h2&gt;

&lt;h4 id=&#34;about-recipe:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;About recipe&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t need to write &lt;code&gt;sudo&lt;/code&gt; specifically because itamae automatically does it well.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not_if&lt;/code&gt; is very useful &lt;a href=&#34;https://github.com/itamae-kitchen/itamae/wiki/Resources&#34;&gt;resource&lt;/a&gt;.&lt;br /&gt;
With that we can avoid unnecessary execution of recipes when we do it repeatedly.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;execution:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Execution&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;we can of course execute itamae locally not via ssh.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;More&lt;/h2&gt;

&lt;h4 id=&#34;including-recipes:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Including Recipes&lt;/h4&gt;

&lt;p&gt;Paths are indicated relatively from the recipe.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_recipe &amp;quot;yum.rb&amp;quot;
include_recipe &amp;quot;apache22-php.rb&amp;quot;
include_recipe &amp;quot;ruby.rb&amp;quot;
include_recipe &amp;quot;gem.rb&amp;quot;
include_recipe &amp;quot;npm.rb&amp;quot;
include_recipe &amp;quot;ryogoku.rb&amp;quot;
include_recipe &amp;quot;add_deploy_user.rb&amp;quot;
include_recipe &amp;quot;add_webhook_script.rb&amp;quot;
include_recipe &amp;quot;cron.rb&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;other-my-recipes:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Other my recipes&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;recipes/add_deploy_user.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;add deploy user&amp;quot; do
  # you cannot ssh unless changing password
  command &amp;quot;
    adduser --system --shell /bin/bash --home-dir /home/deploy --user-group deploy &amp;amp;&amp;amp; \
    passwd -f -u deploy &amp;amp;&amp;amp; \
    mkdir -p /home/deploy/.ssh
  &amp;quot;
  not_if &amp;quot;grep ^deploy /etc/passwd&amp;quot;
end
# Set up key
remote_directory &amp;quot;/home/deploy/.ssh&amp;quot; do
  source &amp;quot;../templates/.ssh/&amp;quot;
end
execute &amp;quot;Change ssh files permission&amp;quot; do
  command &amp;quot;
    chown -R deploy:deploy /home/deploy &amp;amp;&amp;amp; \
    chmod 700 /home/deploy/.ssh &amp;amp;&amp;amp; \
    chmod 600 /home/deploy/.ssh/authorized_keys &amp;amp;&amp;amp; \
    chmod 600 /home/deploy/.ssh/id_rsa
  &amp;quot;
end
execute &amp;quot;disable requiretty&amp;quot; do
  command &amp;quot;sed -i &#39;s;^Defaults *requiretty;#&amp;amp;;g&#39; /etc/sudoers&amp;quot;
end
execute &amp;quot;enable apache user to execute ryogoku without password&amp;quot; do
  command &amp;quot;echo &#39;apache  ALL=(deploy) NOPASSWD: /usr/local/bin/ryogoku&#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;
  not_if &amp;quot;grep ^apache /etc/sudoers&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;recipes/apache22-php.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;mkdir -p /usr/local/src&amp;quot; do
  command &amp;quot;mkdir -p /usr/local/src&amp;quot;
  not_if &amp;quot;test -d /usr/local/src&amp;quot;
end

#
# apache
#

execute &amp;quot;download apache tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; curl -L -O http://apache.cs.utah.edu//httpd/httpd-2.2.29.tar.gz&amp;quot;
  not_if &amp;quot;test -e /usr/local/src/httpd-2.2.29.tar.gz&amp;quot;
end

execute &amp;quot;tar apache tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; tar xzvf httpd-2.2.29.tar.gz&amp;quot;
  not_if &amp;quot;test -d /usr/local/src/httpd-2.2.29&amp;quot;
end

execute &amp;quot;install apache&amp;quot; do
  command &amp;quot;
  cd /usr/local/src/httpd-2.2.29 &amp;amp;&amp;amp; \
  ./configure \
    --prefix=/opt/apache2.2.29 \
    --enable-mods-shared=all \
    --enable-proxy \
    --enable-ssl \
    --with-ssl \
    --with-mpm=prefork \
    --with-pcre &amp;amp;&amp;amp; \
  make &amp;amp;&amp;amp; \
  make install
  &amp;quot;
  not_if &amp;quot;test -d /opt/apache2.2.29&amp;quot;
end

# Apache config
sed_scripts_for_httpd_conf = [
  &#39;s/^Listen 80/#&amp;amp;/&#39;,
  &#39;s/^DocumentRoot/#&amp;amp;/&#39;,
  &#39;/^&amp;lt;Directory/,/^&amp;lt;\/Directory/s/^/#/&#39;,
  &#39;s;ScriptAlias /cgi-bin;#&amp;amp;;&#39;,
  &#39;s;#\(Include conf/extra/httpd-mpm.conf\);\1;&#39;,
  &#39;s;#\(Include conf/extra/httpd-default.conf\);\1;&#39;,
  &#39;/^\s*DirectoryIndex/s/$/ index.php/&#39;, # DirectoryIndex; index.html precedes index.php
  # Change User &amp;amp; Group
  &#39;s;^\(User \)daemon$;\1apache;&#39;,
  &#39;s;^\(Group \)daemon$;\1apache;&#39;
]

sed_scripts_for_httpd_conf.each do |sed_script_for_httpd_conf|
  execute sed_script_for_httpd_conf do
    command &#39;sed -i \&#39;&#39; + sed_script_for_httpd_conf + &#39;\&#39; /opt/apache2.2.29/conf/httpd.conf&#39;
  end
end

execute &amp;quot;edit httpd.conf&amp;quot; do
  command &#39;echo &amp;quot;Include /srv/apache/apache.conf&amp;quot; &amp;gt;&amp;gt; /opt/apache2.2.29/conf/httpd.conf&#39;
  not_if &amp;quot;grep /srv/apache/apache.conf /opt/apache2.2.29/conf/httpd.conf&amp;quot;
end

execute &amp;quot;edit httpd-defaut.conf&amp;quot; do
  command &#39;sed -i &amp;quot;s/\(ServerTokens \)Full/\1Prod/&amp;quot; /opt/apache2.2.29/conf/extra/httpd-default.conf&#39;
end

# Change User &amp;amp; Group
#  useradd --system --shell /usr/sbin/nologin --user-group --home /dev/null apache; \
execute &amp;quot;add apache user &amp;amp; group&amp;quot; do
  command &amp;quot;useradd --system --shell /usr/sbin/nologin --user-group --home /dev/null apache&amp;quot;
  not_if &amp;quot;grep &#39;^apache&#39; /etc/passwd&amp;quot;
end

execute &amp;quot;mkdir -p /srv/apache&amp;quot; do
  command &amp;quot;mkdir -p /srv/apache&amp;quot;
  not_if &amp;quot;test -d /srv/apache&amp;quot;
end

remote_file &amp;quot;/srv/apache/apache.conf&amp;quot; do
  source &amp;quot;../templates/apache.conf&amp;quot;
end

execute &amp;quot;set apache CustomLog&amp;quot; do
  command &#39;echo \&#39;CustomLog &amp;quot;|/opt/apache2.2.29/bin/rotatelogs /srv/www/logs/access/access.%Y%m%d.log 86400 540&amp;quot; combined\&#39; &amp;gt;&amp;gt; /srv/apache/apache.conf&#39;
  not_if &amp;quot;grep &#39;^CustomLog&#39; /srv/apache/apache.conf&amp;quot;
end

execute &amp;quot;set apache ErrorLog&amp;quot; do
  command &#39;echo \&#39;ErrorLog &amp;quot;|/opt/apache2.2.29/bin/rotatelogs /srv/www/logs/error/error.%Y%m%d.log 86400 540&amp;quot;\&#39; &amp;gt;&amp;gt; /srv/apache/apache.conf&#39;
  not_if &amp;quot;grep &#39;^ErrorLog&#39; /srv/apache/apache.conf&amp;quot;
end

execute &amp;quot;make log dirs&amp;quot; do
  command &amp;quot;mkdir -m 777 -p /srv/www/logs/{access,error,app}&amp;quot;
  not_if &amp;quot;test -d /srv/www/logs/access&amp;quot;
end

execute &amp;quot;make Apache document root&amp;quot; do
  command &amp;quot;mkdir -p /srv/www/htdocs/&amp;quot;
  not_if &amp;quot;test -d /srv/www/htdocs/&amp;quot;
end

#
# php
#

execute &amp;quot;download php tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; curl -L -O http://php.net/distributions/php-5.6.7.tar.gz&amp;quot;
  not_if &amp;quot;test -e /usr/local/src/php-5.6.7.tar.gz&amp;quot;
end

execute &amp;quot;tar php tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; tar xzvf php-5.6.7.tar.gz&amp;quot;
  not_if &amp;quot;test -d /usr/local/src/php-5.6.7&amp;quot;
end

execute &amp;quot;install php&amp;quot; do
  command &amp;quot;
  cd /usr/local/src/php-5.6.7 &amp;amp;&amp;amp; \
  ./configure \
    --prefix=/opt/php-5.6.7 \
    --with-config-file-path=/srv/php \
    --with-apxs2=/opt/apache2.2.29/bin/apxs \
    --with-libdir=lib64 \
    --enable-mbstring \
    --enable-intl \
    --with-icu-dir=/usr \
    --with-gettext=/usr \
    --with-pcre-regex=/usr \
    --with-pcre-dir=/usr \
    --with-readline=/usr \
    --with-libxml-dir=/usr/bin/xml2-config \
    --with-zlib=/usr \
    --with-zlib-dir=/usr \
    --with-gd \
    --with-jpeg-dir=/usr \
    --with-png-dir=/usr \
    --with-freetype-dir=/usr \
    --enable-gd-native-ttf \
    --enable-gd-jis-conv \
    --with-openssl=/usr \
    --with-mcrypt=/usr \
    --enable-bcmath \
    --with-curl \
    --enable-exif &amp;amp;&amp;amp; \
  make &amp;amp;&amp;amp; \
  make install
  &amp;quot;
  not_if &amp;quot;test -d /opt/php-5.6.7&amp;quot;
end

#
# xdebug
#

# set php PATH because using phpize for xdebug installation
execute &amp;quot;set php PATH&amp;quot; do
  command &amp;quot;echo &#39;export PATH=/opt/php-5.6.7/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc&amp;quot;
  not_if &amp;quot;grep /opt/php-5.6.7/bin ~/.bashrc&amp;quot;
end

execute &amp;quot;install xdebug&amp;quot; do
  command &amp;quot;
    cd /usr/local/src &amp;amp;&amp;amp; \
    curl -L -O http://xdebug.org/files/xdebug-2.3.2.tgz &amp;amp;&amp;amp; \
    tar -xzf xdebug-2.3.2.tgz &amp;amp;&amp;amp; \
    cd xdebug-2.3.2 &amp;amp;&amp;amp; \
    phpize &amp;amp;&amp;amp; \
    ./configure --enable-xdebug &amp;amp;&amp;amp; \
    make &amp;amp;&amp;amp; \
    make install
  &amp;quot;
  not_if &amp;quot;test -e /opt/php-5.6.7/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so&amp;quot;
end

# php.ini
execute &amp;quot;mkdir -p /srv/php&amp;quot; do
  command &amp;quot;mkdir -p /srv/php&amp;quot;
  not_if &amp;quot;test -d /srv/php&amp;quot;
end
remote_file &amp;quot;/srv/php/php.ini&amp;quot; do
  source &amp;quot;../templates/php.ini&amp;quot;
end
execute &amp;quot;Add zend_extension directive&amp;quot; do
  command &amp;quot;echo &#39;zend_extension = \&amp;quot;/opt/php-5.6.7/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\&amp;quot;&#39; &amp;gt;&amp;gt; /srv/php/php.ini&amp;quot;
  not_if &amp;quot;grep ^zend_extension /srv/php/php.ini&amp;quot;
end


execute &amp;quot;start apache&amp;quot; do
  command &amp;quot;/opt/apache2.2.29/bin/apachectl start&amp;quot;
  not_if &amp;quot;ps aux | grep httpd | grep -v grep&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>I made a deployment tool - ryogoku</title>
      <link>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</link>
      <pubDate>Wed, 25 Mar 2015 23:11:48 +0900</pubDate>
      
      <guid>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</guid>
      <description>

&lt;p&gt;rsync によるデプロイツール・&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt; を作成した。&lt;br /&gt;
I made a deployment tool, &lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt;.&lt;br /&gt;
It uses &lt;code&gt;rsync&lt;/code&gt; to deploy.&lt;/p&gt;

&lt;h2 id=&#34;why:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;why&lt;/h2&gt;

&lt;p&gt;会社でデプロイの自動化を進めており、何か良いツールはないか探していた。&lt;br /&gt;
ちなみに自分の会社は以下の様な条件での仕事が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受託業務中心。納品するのは php アプリケーション&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;プロダクション・サーバーがクライアントの所有で自由にツール類をインストールできない。git や ruby 等が入っていないことが殆ど。&lt;/li&gt;
&lt;li&gt;web サーバー2台の db サーバー1台という小規模な構成が殆ど。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの条件に見合うようなデプロイツールを探して、色々情報を集めた。&lt;br /&gt;
特に参考になったのはこのページ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/naoya/20130118/1358477523&#34;&gt;開発メモ#1 : Cinnamon によるデプロイ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして、最終的には以下の様な理由で自作することにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano は複雑そう。また、php のアプリで ruby のツールを使いたくなかった。&lt;/li&gt;
&lt;li&gt;fabric も検討したが、デザイナー含めた他のメンバーに homebrew や pip 等のインストール作業をさせるのがハードルだと感じた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; というシェルスクリプトのデプロイツールを発見し、インストールが楽なこととシンプルな使い方がとても良いと感じた。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/futoase/items/c2ac39cfe28813b79bc4&#34;&gt;【個人メモ】デプロイするためにdeployを使ってみる&lt;/a&gt;&lt;br /&gt;
しかし、デプロイ先サーバーでの git インストールが必須な点と、複数台のホストに対して実行出来ない点が自分の目的とそぐわなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上から、&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; をベースに、殆どの unix マシンで使用可能な rsync 使ったツールを作成することにした。&lt;/p&gt;

&lt;p&gt;I wanted simple deployment tool suitable for my work.&lt;br /&gt;
My work is like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making php applications that are outsourced from various clients.&lt;/li&gt;
&lt;li&gt;Production servers are properties of clients, and softwares like git or ruby are rarely installed in them.&lt;br /&gt;
And also I am not permitted to install softwares.&lt;/li&gt;
&lt;li&gt;Server cluster is consisted of 2 web servers and 1 database server in most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started searching tools to match these conditions.&lt;br /&gt;
But I eventually decide to make my own one after a while surfing the web.&lt;br /&gt;
Because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano seemed to be too complicated.&lt;/li&gt;
&lt;li&gt;fabric seemed much better than capistrano, but I thought it was still hard for my team to install homebrew or pip things.&lt;/li&gt;
&lt;li&gt;I found &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; on github.&lt;br /&gt;
that&amp;rsquo;s cool deployment tool because installation and usage were very simpler than others.&lt;br /&gt;
But it requires git to be installed in deployment servers and doesn&amp;rsquo;t support deployment to multiple hosts.&lt;br /&gt;
That didn&amp;rsquo;t match my purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to make my own one based on &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;br /&gt;
Thank you, &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-it-is-like-ryogoku:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;What it is like - ryogoku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;https://github.com/yutaf/ryogoku&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Clone the repository from github, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/ryogoku-01.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuration:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ryogoku.conf&lt;/code&gt; を git レポジトリルートに作成し、以下の様な内容を書く。&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;ryogoku.conf&lt;/code&gt; at the git repository root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[prod]
user rob
host 128.199.170.128 128.199.244.193
path /var/www/html
ref master
pre-rsync ./bin/pre-rsync
post-deploy /var/www/html/bin/update.sh &amp;amp;&amp;amp; /var/www/html/bin/update.prod.sh
umask 002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容について簡単に説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイ先は&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; はデプロイする git のリビジョンを指定&lt;br /&gt;
コマンドライン引数での指定も可能で、その場合はコマンドライン引数の値が優先される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; は rsync を行う前に実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; は rsync を行ったあとに実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; はファイルパーミッションを設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What directives in this configuration file means are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deploying to&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; is the git revision to be deployed.&lt;br /&gt;
This value can also be set by command line argument, which is prior to config one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; defines commands that are executed before rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; defines commands that are executed after rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; defines the file permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;execution:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Execution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、master リビジョンが prod で指定したホストにデプロイされる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;master&lt;/code&gt; revision is deployed to the hosts defined in &lt;code&gt;prod&lt;/code&gt; section by this command.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;git リビジョンを指定する場合は、コマンドラインの引数に渡す。&lt;/p&gt;

&lt;p&gt;If you want to deploy specific revision, you can pass an argument to command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod HEAD^^
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod b7ea7b3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod 1.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod develop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>phpbrew memo</title>
      <link>http://yutaf.github.io/phpbrew-memo/</link>
      <pubDate>Tue, 17 Feb 2015 12:32:23 +0900</pubDate>
      
      <guid>http://yutaf.github.io/phpbrew-memo/</guid>
      <description>

&lt;p&gt;ローカル開発環境に phpenv + php-build を使っていたが、&lt;a href=&#34;https://github.com/phpbrew/phpbrew&#34;&gt;phpbrew&lt;/a&gt; のほうが簡単そうだったので移行した。&lt;/p&gt;

&lt;h3 id=&#34;environment:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;environment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;osx 10.9.5&lt;/li&gt;
&lt;li&gt;Apache/2.2.29&lt;/li&gt;
&lt;li&gt;mysql 5.6.15&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;メリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;メリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;apache の php モジュールをバージョン毎に保存してくれる。&lt;/li&gt;
&lt;li&gt;configure オプションのコンパイルが楽になる（特にosx）

&lt;ul&gt;
&lt;li&gt;pcre&lt;/li&gt;
&lt;li&gt;&amp;ndash;enable-intl&lt;br /&gt;
など。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;デメリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;デメリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用するのに php5.3 以上が必要&lt;/li&gt;
&lt;li&gt;configure option を variants という独自の仕組みで指定する。&lt;/li&gt;
&lt;li&gt;php のバージョン切り替えで挙動が不安定な時がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requirement:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;Requirement&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Requirement&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Requirement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;phpbrew を利用するには php が必要。&lt;br /&gt;
osx はデフォルトで php がインストールされているので、osx ユーザーにはいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
$ chmod +x phpbrew
$ mv phpbrew /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-option-の設定と-php-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;configure option の設定と php のインストール&lt;/h2&gt;

&lt;p&gt;phpbrew には &lt;code&gt;variants&lt;/code&gt; という独自の configure option の指定方法がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants の一覧は以下のコマンドで確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew variants
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants を使うと、configure オプションによるビルドの失敗を上手く補ってくれるメリットがある。&lt;br /&gt;
例えば、&lt;code&gt;pcre&lt;/code&gt; オプションは以下の様な失敗をしやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;php の cli で動く pcre と apache モジュールで動く pcre のバージョンが違う&lt;/li&gt;
&lt;li&gt;apache に同梱された pcre がリンクされて、そのバージョンが古くてまともに動かない&lt;/li&gt;
&lt;li&gt;pcre ライブラリを指定しても、正しくリンクされない(個人的には osx でありました)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果として、&lt;code&gt;preg_replace&lt;/code&gt; 等、preg 系関数がまともに動かなくなってしまうことがある。&lt;/p&gt;

&lt;p&gt;しかし、この variants を使って pcre を指定すれば、apache モジュールと php cli で同じバージョンのちゃんと動く pcre ライブラリが入る。&lt;br /&gt;
これはかなりありがたい。&lt;br /&gt;
&lt;br&gt;
&lt;code&gt;--enable-intl&lt;/code&gt; もlinux に比べて osx では php のビルドがまともにいかないことが多いが、それもうまく補ってくれる。&lt;br /&gt;
&lt;br&gt;
ちなみに、&lt;code&gt;--&lt;/code&gt; に続けて書けば通常の configure option の記述も可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +mysql +sqlite -- \
    --enable-ftp --apxs2=/opt/local/apache2/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ファイルによる-variants-の設定:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;ファイルによる variants の設定&lt;/h3&gt;

&lt;p&gt;yamlファイルで独自の variants を設定できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;config.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml:config.yaml&#34;&gt;variants:
  dev:
    bcmath:
    mbstring:
    intl:
    icu:
      - --with-icu-dir=/usr/local/opt/icu4c
    gettext:
      - --with-gettext=/usr/local/opt/gettext
    pcre:
    readline:
    xml:
      - --with-libxml-dir=/usr/local/opt/libxml2
    soap:
    zlib:
      - --with-zlib=/usr/local/opt/zlib
      - --with-zlib-dir=/usr/local/opt/zlib
    gd:
      - --with-gd
      - --with-jpeg-dir=/usr/local/opt/jpeg
      - --with-png-dir=/usr/local/opt/libpng
      - --with-freetype-dir=/usr/local/opt/freetype
      - --enable-gd-native-ttf
      - --enable-gd-jis-conv
    openssl:
    mcrypt:
    curl:
    mysql:
    pdo:
    my-exif:
      - --enable-exif
    my-config-file-path:
      - --with-config-file-path=/Users/yutaf/Sync/www/php.ini
extensions:
  dev:
    xdebug: stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yamlファイルを作成後、以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew init -c=/path/to/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルに記述されている &lt;code&gt;+dev&lt;/code&gt; variants を使用できるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;個人的ベストプラクティス:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;個人的ベストプラクティス&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +neutral +apxs2=/opt/apache2.2.29/bin/apxs +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+neutral&lt;/code&gt; を指定しないと &lt;code&gt;--disable-all&lt;/code&gt; 等のオプションが自動的に設定される。&lt;br /&gt;
&lt;code&gt;--disable-all&lt;/code&gt; は phpのデフォルトで有効な json や xml モジュール等が無効になるので、これらの関数が使用できなくなる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;+apxs2&#39;&lt;/code&gt; は apache の php モジュールをバージョン毎に管理する為に必須(後述)。&lt;/p&gt;

&lt;h2 id=&#34;extension-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;extension のインストール&lt;/h2&gt;

&lt;p&gt;xdebug などの extension も yaml ファイル に独自の variants を記述してインストールできる。&lt;br /&gt;
（上のyaml を参照。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew ext install +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-のバージョン切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;php のバージョン切り替え&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew switch php-5.4.36
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apache-のphpモジュール切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;apache のphpモジュール切り替え&lt;/h2&gt;

&lt;p&gt;variants の &lt;code&gt;+apxs2&lt;/code&gt; を設定すると各バージョンごとにモジュールを保存し、
httpd.conf に &lt;code&gt;LoadModule php5_module ...&lt;/code&gt; の記述がされる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、その際 conf と modules フォルダのパーミッションを 777 に変更するよう言われる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.29 +apxs2=/opt/apache2.2.29/bin/apxs
$ phpbrew install 5.4.36 +apxs2=/opt/apache2.2.29/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;作成されるモジュール&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;/opt/apache2.2.29/modules/libphp5.3.29.so
/opt/apache2.2.29/modules/libphp5.4.36.so

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;httpd.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを切り替えるには httpd.conf で使用するバージョンのモジュール以外をコメントアウトして apache を再起動する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
#LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apachectl graceful
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;感想:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;気持ち悪い所も多いが、osx でphpをビルドするならこれが一番楽な気がした。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>