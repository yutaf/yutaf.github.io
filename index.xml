<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yutaf blog</title>
    <link>http://yutaf.github.io/</link>
    <description>Recent content on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Fri, 24 Jun 2016 13:33:48 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Translate csrf validation message in symfony form component</title>
      <link>http://yutaf.github.io/translate-csrf-validation-message-in-symfony-form-component/</link>
      <pubDate>Fri, 24 Jun 2016 13:33:48 +0900</pubDate>
      
      <guid>http://yutaf.github.io/translate-csrf-validation-message-in-symfony-form-component/</guid>
      <description>&lt;p&gt;I was stuck for a while.&lt;br /&gt;
You need to pass translator instance(also domain as needed) as an argument when you instantiate CsrfExtension.&lt;/p&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Forms;

...

$csrfExtension = new CsrfExtension($csrfTokenManager, $translator, &#39;validators&#39;);

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([$csrfExtension])
  -&amp;gt;getFormFactory();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;　&lt;/p&gt;

&lt;p&gt;I wrote about internationalization of symfony validation component in &lt;a href=&#34;http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/&#34;&gt;older post&lt;/a&gt;,&lt;br /&gt;
however it seems each form extensions should be passed the Translator instance individually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;
use Symfony\Component\Form\Forms;
use Symfony\Component\Security\Csrf\CsrfTokenManager;
use Symfony\Component\Translation\Translator;
use Symfony\Component\Validator\Validation;

...

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

// extensions
$validatorExtension = new ValidatorExtension($validator);
$csrfExtension = new CsrfExtension($csrfTokenManager, $translator, &#39;validators&#39;);

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([$csrfExtension, $validatorExtension])
  -&amp;gt;getFormFactory();
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Password confirmation form with symfony</title>
      <link>http://yutaf.github.io/password-confirmation-form-with-symfony/</link>
      <pubDate>Fri, 24 Jun 2016 11:16:11 +0900</pubDate>
      
      <guid>http://yutaf.github.io/password-confirmation-form-with-symfony/</guid>
      <description>&lt;p&gt;I was so impressed it goes very easy.&lt;br /&gt;
&lt;em&gt;RepeatedType Field&lt;/em&gt; helps us to create password &amp;amp; password confirmation fields.&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/reference/forms/types/repeated.html&#34;&gt;http://symfony.com/doc/current/reference/forms/types/repeated.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, RepeatedType::class, array(
        &#39;type&#39; =&amp;gt; PasswordType::class,
        &#39;required&#39; =&amp;gt; true,
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        &#39;first_options&#39;  =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.password&#39;),
        &#39;second_options&#39; =&amp;gt; array(&#39;label&#39; =&amp;gt; &#39;label.passwordConfirmation&#39;),
        ))
  -&amp;gt;getForm();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you will have password confirmation fields with their matching validation.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Internationalize symfony validation component outside of symfony framework</title>
      <link>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 19 Jun 2016 13:35:28 +0900</pubDate>
      
      <guid>http://yutaf.github.io/internationalize-symfony-validation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;It took me several hours to make it, Symfony validation component Internationalization.&lt;br /&gt;
The point is instantiation of &lt;code&gt;translator&lt;/code&gt; and &lt;code&gt;validator&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/form&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/validator&amp;quot;: &amp;quot;^3.1&amp;quot;,
  },
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;use Symfony\Component\Translation\Translator;
use Symfony\Component\Translation\MessageSelector;
use Symfony\Component\Translation\Loader\XliffFileLoader
use Symfony\Component\Validator\Validation;
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;

$translator = new Translator($locale, new MessageSelector());

$vendorDir = realpath(__DIR__.&#39;/../vendor&#39;);
$vendorFormDir = $vendorDir.&#39;/symfony/form&#39;;
$vendorValidatorDir = $vendorDir.&#39;/symfony/validator&#39;;

$translator-&amp;gt;addLoader(&#39;xlf&#39;, new XliffFileLoader());
// there are built-in translations for the core error messages
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.en.xlf&#39;, &#39;en&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorFormDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);
$translator-&amp;gt;addResource(&#39;xlf&#39;, $vendorValidatorDir.&#39;/Resources/translations/validators.ja.xlf&#39;, &#39;ja&#39;, &#39;validators&#39;);

$validator = Validation::createValidatorBuilder()
  -&amp;gt;setTranslator($translator)
  -&amp;gt;setTranslationDomain(&#39;validators&#39;)
  -&amp;gt;getValidator();

$formFactory = Forms::createFormFactoryBuilder()
  -&amp;gt;addExtensions([new ValidatorExtension($validator)])
  -&amp;gt;getFormFactory();

$form = $formFactory-&amp;gt;get()-&amp;gt;createBuilder()
  -&amp;gt;add(&#39;email&#39;, TextType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 4)),
          ),
        ))
  -&amp;gt;add(&#39;password&#39;, PasswordType::class, array(
        &#39;constraints&#39; =&amp;gt; array(
          new NotBlank(),
          new Length(array(&#39;min&#39; =&amp;gt; 6)),
          ),
        ))
  -&amp;gt;getForm();

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It is important that you specify &lt;code&gt;validators&lt;/code&gt; as the domain, 4th argument of &lt;code&gt;addResource&lt;/code&gt; method.&lt;br /&gt;
And it should correspond to the validator&amp;rsquo;s domain, which is specified with &lt;code&gt;setTranslationDomain&lt;/code&gt; method.&lt;br /&gt;
You have to pass translator instance to the validator, too.&lt;/p&gt;

&lt;p&gt;Please see the documentation if you want further explanation for domain.
&lt;a href=&#34;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&#34;&gt;http://symfony.com/doc/current/components/translation/introduction.html#using-message-domains&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;br /&gt;
You already have form with internationalized validation messages.&lt;/p&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;http://symfony.com/doc/current/components/form/introduction.html#translation&#34;&gt;http://symfony.com/doc/current/components/form/introduction.html#translation&lt;/a&gt;
&lt;a href=&#34;http://stackoverflow.com/questions/16063531/translation-in-validator-component&#34;&gt;http://stackoverflow.com/questions/16063531/translation-in-validator-component&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php i18n with twig and symfony translation component outside of symfony framework</title>
      <link>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</link>
      <pubDate>Sun, 05 Jun 2016 14:47:30 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-i18n-with-twig-and-symfony-translation-component-outside-of-symfony-framework/</guid>
      <description>&lt;p&gt;composer.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;require&amp;quot; : {
    &amp;quot;twig/twig&amp;quot;: &amp;quot;~1.0&amp;quot;,
    &amp;quot;symfony/translation&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/twig-bridge&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/config&amp;quot;: &amp;quot;^3.1&amp;quot;,
    &amp;quot;symfony/yaml&amp;quot;: &amp;quot;^3.1&amp;quot;
  },
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;php&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$loader = new Twig_Loader_Filesystem(__DIR__.&#39;/../templates&#39;);
$twig = new Twig_Environment($loader);

$locale = &#39;en&#39;;
if(isset($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;]) &amp;amp;&amp;amp; strlen($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;])&amp;gt;0) {
  $locale = substr($_SERVER[&#39;HTTP_ACCEPT_LANGUAGE&#39;], 0, 2);
}
$translator = new Symfony\Component\Translation\Translator($locale, new \Symfony\Component\Translation\MessageSelector());
$translator-&amp;gt;setFallbackLocales([&#39;en&#39;]);
$translator-&amp;gt;addLoader(&#39;yaml&#39;, new Symfony\Component\Translation\Loader\YamlFileLoader());
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/en.yml&#39;, &#39;en&#39;);
$translator-&amp;gt;addResource(&#39;yaml&#39;,  __DIR__.&#39;/../locales/ja.yml&#39;, &#39;ja&#39;);

$twig-&amp;gt;addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension($translator));
$data = [&#39;somethig&#39; =&amp;gt; &#39;abcd&#39;];
$twig-&amp;gt;render(&amp;quot;hello.html&amp;quot;, $data);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yml&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;foo: FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;html&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;{{ &#39;foo&#39;|trans }}&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;References:&lt;br /&gt;
&lt;a href=&#34;https://gist.github.com/2bard/4329452&#34;&gt;https://gist.github.com/2bard/4329452&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/twig.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/twig.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;http://silex.sensiolabs.org/doc/providers/translation.html&#34;&gt;http://silex.sensiolabs.org/doc/providers/translation.html&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Domain Status: clientHold</title>
      <link>http://yutaf.github.io/domain-status-clienthold/</link>
      <pubDate>Thu, 28 Jan 2016 16:24:41 +0900</pubDate>
      
      <guid>http://yutaf.github.io/domain-status-clienthold/</guid>
      <description>&lt;p&gt;Route 53 でdnsの設定をした後、何度 &lt;code&gt;dig&lt;/code&gt; や &lt;code&gt;nslookup&lt;/code&gt; をやっても反映されないのでおかしいと思ったが、ドメインステータスに問題があるらしい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ whois everydaymusic.net | grep Status
   Status: clientHold https://www.icann.org/epp#clientHold
   Status: clientTransferProhibited https://www.icann.org/epp#clientTransferProhibited
Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
Domain Status: clientHold https://icann.org/epp#clientHold
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Domain Status: clientHold&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://dev.classmethod.jp/cloud/aws/onamae-to-route53/&#34;&gt;参考にしていたページ&lt;/a&gt;だとここが&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Domain Status: ok
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と表示されている。&lt;br /&gt;
調べた所、以下のように書いてあった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://muumuu-domain.com/?mode=faq&amp;amp;state=answer&amp;amp;id=000717&#34;&gt;https://muumuu-domain.com/?mode=faq&amp;amp;state=answer&amp;amp;id=000717&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ｑ．【clientHoldとは？】ドメインが急に利用できなくなりました。
取得されているドメインのご契約やネームサーバ設定に問題がないのに、
ホームページの表示や、メールアドレスがご利用いただけなくなった場合、
上位機関による『利用制限(clientHold)』が行われている可能性があります。

・・・

利用制限の解除は、ドメインのWHOIS情報・ムームーIDにご登録の
メールアドレスをご確認いただき、上位機関より送信される、
『 ドメイン情報認証 』へのご対応が必要です。

・・・

■WHOIS情報に「弊社の情報を代理公開する」を設定されている場合

コントロールパネルへログイン後、左方メニュー項目の
「[その他]個人設定 &amp;gt; ユーザー登録情報」から、
最下部の『 ご連絡先メールアドレス 』が
受信可能なものであるかをご確認ください。

受信可能なメールアドレスでしたら、そのアドレス宛に、
以下のメールが送信されている可能性がございます。

-----------------------------
件名：【重要】[お名前.com] ドメイン 情報認証のお願い
または
件名：【重要】[お名前.com] ドメイン利用制限設定　完了通知
または
件名：【重要】[ムームードメイン] ドメイン 情報認証のお願い

送信元メールアドレス：[verification-noreply@onamae.com]
-----------------------------

恐れ入りますが、受信メールBOXや迷惑メールBOXなどに、
届いていないかご確認いただき、メールを確認されましたら、
メール本文内に記載された「URL」へアクセスをお願いいたします。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;メールボックス調べたら確かに届いていた。&lt;br /&gt;
ドメインはムームードメインで契約したが、このメールはお名前.com から届いていた。&lt;br /&gt;
たぶん、広告かなんかだと思って全く読んでなかった。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;From: verification-noreply@onamae.com
Subject: 【重要】[お名前.com] ドメイン 情報認証のお願い
────────────────────────────────── 
■メールアドレスの有効性認証■
────────────────────────────────── 

本メールは、先日お送りしているドメイン登録者（Registrant）情報のメール
アドレス有効性認証をご対応いただけていない方に送信しております。

対応期日までに認証が行われない場合、ドメインの利用が制限されますので、
お早めにご対応いただきますようお願いいたします。

ドメイン登録者情報のメールアドレスとして情報が正しい場合は、以下URLへ
アクセスしてください。

対応期日：2015年07月18日 15:25
https://www.onamae.com/domain/verification?authId=26534&amp;amp;token=pq4CWa3gNp7vbA_9ATkiuRbKt&amp;amp;lang=ja

※メールアドレス以外にも、Whois情報が不正確なドメインは、登録抹消や
　 使用停止の対象となることがございますのでご注意ください。
※各種情報の確認・修正等はご利用のドメイン管理会社へご相談くださいます
　ようお願いいたします。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有効期限半年ぐらい過ぎてたけど、メール内のリンク先をクリックしたらドメイン利用制限は無事解除された。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ whois everydaymusic.net | grep Status
   Status: clientTransferProhibited https://www.icann.org/epp#clientTransferProhibited
Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Domain Status: ok&lt;/code&gt; ではないけど、大丈夫なのかな。&lt;/p&gt;

&lt;p&gt;ちなみに、ムームードメインからもこんなメールが来ていた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;From: ムームードメイン news@service.muumuu-domain.com mag.pepabo.com
Subject: 【重要】ドメイン情報認証開始および利用規約改定のお知らせ【ムームードメイン】

このメールはムームードメインのすべてのユーザー様へお送りしています。
------------------------------------------------------------------

平素よりムームードメインをご利用いただき、誠にありがとうございます。

この度、特定のお手続きを行った際に、ICANNのWHOIS情報正確性確認方針に基づき、
ムームードメインの上位レジストラである「お名前.com」（GMOインターネット株式会社）より、
お客様のメールアドレスの有効性を確認するメール（ドメイン情報認証）が
送信されることとなりました。

ドメイン情報認証のメールを受信されましたら、2週間以内に、
メールアドレスの有効性確認のお手続きをお願いいたします。

ドメイン情報認証のお手続きが期限内に行われない場合、
ドメインの利用制限が行われ、該当のドメインを利用したホームページの閲覧や、
メールの送受信ができなくなりますので、必ずお手続きをお願いいたします。

ドメイン情報認証の対象となるお手続きおよび詳細は以下のとおりです。


■ドメイン情報認証が行われるお手続き

　・新規ドメイン取得（一括取得を含む）
　・WHOIS情報のうち、登録者情報（Registrant）の変更
　・ムームードメインへのドメイン移管

※認証はメールアドレスひとつにつき1回です。
　一度認証を行ったメールアドレスについてはその後の認証は行われません。

■ドメイン情報認証メール送信元メールアドレス

　verification-noreply@onamae.com

■ドメイン情報認証メールタイトル

　「【重要】[お名前.com] ドメイン 情報認証のお願い」

■送信先メールアドレス

　○WHOIS情報を弊社情報で代理公開している方
　　・お客様のご連絡先メールアドレスへ送信されます

　○WHOIS情報をお客様の情報で公開している方
　　・登録者情報（Registrant）に記載されているメールアドレスへ送信されます

■ドメイン情報認証方法
　上記タイトルで送信されるメールに記載されているURLをクリックし、
　メールアドレスの有効性認証を行ってください。

■ドメイン情報認証開始日時
　2015年6月30日午前12時以降のお手続き

■ドメイン情報認証の対象となるドメイン

.com/.net/.org/.biz/.asia/.info/.mobi/.xxx/.ceo/.wiki/.yokohama/.xyz/.bar/
.rest/.christmas/.blackfriday/.click/.fishing/.rodeo/.vodka/.hosting/.property/
.diet/.help/.audio/.hiphop/.juegos/.host/.press/.website/.black/.onl/.rich/
.global/.ryukyu/.surf/.club/.nagoya/.tokyo/.sexy/.tattoo/.link/.guitars/.pics/
.gift/.photo/.pink/.red/.blue/.kim/.ink/.okinawa/.cooking/.horse/.bid/.trade/
.webcam/.market/.beer/.uno/.cricket/.science/.casa/.work/.yoga/.vegas/.dance/
.social/.pub/.moda/.consulting/.kaufen/.actor/.rocks/.haus/.party/.fashion/
.garden/.fit/.flowers/.kiwi/.buzz/.country/.wedding/.space/

※日本語ドメインを含みます。
※上記リストはムームードメインで今後取り扱い予定のドメインを含んでいます。


また、ドメイン情報認証の開始に伴い、
『ムームードメイン利用規約』の一部を改定いたします。

━━━━━━━━━━━━
■改定日
━━━━━━━━━━━━
2015年6月30日（火）

━━━━━━━━━━━━
■改定内容
━━━━━━━━━━━━
改定の概要は以下の通りです。

・ムームードメイン利用規約第5条に
　ドメイン情報認証に関する規定を追加（第5条第3項および第4項の新規追加）

利用規約の全文につきましては、下記ページをご確認ください。

▽ムームードメイン利用規約
https://muumuu-domain.com/?mode=kiyaku


これからも、ムームードメインをどうぞよろしくお願いいたします。

------------------------------------------------------------------
◆ご不明な点がございましたらお問い合わせフォームよりご連絡ください
https://muumuu-domain.com/?mode=inq
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ムームードメイン https://muumuu-domain.com
GMOペパボ株式会社 http://pepabo.com/company/overview/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;はっきり言って、こういうメールは広告かスパムかだと思って自分のメールフィルターから全く外れてしまっている。。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>how to change facebook timezone setting</title>
      <link>http://yutaf.github.io/how-to-change-facebook-timezone-setting/</link>
      <pubDate>Mon, 21 Dec 2015 20:21:43 -0800</pubDate>
      
      <guid>http://yutaf.github.io/how-to-change-facebook-timezone-setting/</guid>
      <description>&lt;p&gt;You have to change the timezone of your computer.&lt;br /&gt;
&lt;a href=&#34;https://www.facebook.com/help/community/question/?id=4570099785144&#34;&gt;https://www.facebook.com/help/community/question/?id=4570099785144&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>apple music playlist 001</title>
      <link>http://yutaf.github.io/apple-music-playlist-001/</link>
      <pubDate>Sat, 19 Dec 2015 17:59:44 +0900</pubDate>
      
      <guid>http://yutaf.github.io/apple-music-playlist-001/</guid>
      <description>&lt;p&gt;Mystery Jets 2&lt;br /&gt;
&lt;a href=&#34;https://t.co/p0urGDUeqk&#34;&gt;https://t.co/p0urGDUeqk&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Telomere / Mystery Jets&lt;/li&gt;
&lt;li&gt;Serotonin / Mystery Jets&lt;/li&gt;
&lt;li&gt;Young Love / Mystery Jets&lt;/li&gt;
&lt;li&gt;Dreaming of Another World / Mystery Jets&lt;/li&gt;
&lt;li&gt;Two Doors Down / Mystery Jets&lt;/li&gt;
&lt;li&gt;Someone Purer / Mystery Jets&lt;/li&gt;
&lt;li&gt;You Can&amp;rsquo;t Fool Me Dennis / Mystery Jets&lt;/li&gt;
&lt;li&gt;Diamonds In the Dark / Mystery Jets&lt;/li&gt;
&lt;li&gt;Hideaway / Mystery Jets&lt;/li&gt;
&lt;li&gt;Flakes / Mystery Jets&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>fujirock 2015</title>
      <link>http://yutaf.github.io/fujirock-2015/</link>
      <pubDate>Tue, 04 Aug 2015 23:27:11 +0900</pubDate>
      
      <guid>http://yutaf.github.io/fujirock-2015/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2027.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2028.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2035.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2036.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2037.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2038.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2041.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2044.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2045.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2046.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2047.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2049.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2052.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2058.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2061.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2062.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2063.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2064.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2068.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2069.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2080.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2082.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2083.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2086.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2089.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2094.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2095.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2098.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2104.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2107.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2108.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2112.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2113.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2115.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2117.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2128.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2130.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2132.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2133.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2137.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2140.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2145.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2151.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2174.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2178.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2180.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2184.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2188.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2211.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2215.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2218.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2222.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2228.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2235.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2238.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2239.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2240.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2241.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2243.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2244.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2245.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2254.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2264.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2265.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2268.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2275.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2277.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/fujirock-2015/IMG_2280.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuous integration with gitbucket and jenkins</title>
      <link>http://yutaf.github.io/continuous-integration-with-gitbucket-and-jenkins/</link>
      <pubDate>Thu, 11 Jun 2015 13:10:53 +0900</pubDate>
      
      <guid>http://yutaf.github.io/continuous-integration-with-gitbucket-and-jenkins/</guid>
      <description>

&lt;!--
Have you ever thought of these kind of things ?  

- **We want to develop with github, but our codes must be placed in private network...**  
- **Github Enterprise is too expensive...**  
- **We want to run continuous integration with Travis CI or CircleCI to catch `pull request` events and build. But github is needed to use those services...**

I have no idea to bring your team github.  
But I found that we can do almost same things all in your private zone with `GitBucket` + `jenkins`.  
--&gt;

&lt;!--
GitBucket is OSS almost like GitHub, easy to use and free.  
Jenkins can catch pull requests with its plugins.  
--&gt;

&lt;p&gt;伊藤直也さんが書いた &lt;a href=&#34;http://d.hatena.ne.jp/naoya/20140502/1399027655&#34;&gt;GitHub 時代のデプロイ戦略&lt;/a&gt; という記事がある。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;GitHub のイベントを契機に CI as a Service にデプロイを担当させる&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;去年この記事を読んだときは、先端を行っている会社はこんなことをやっているのか、すごい、としか思えなかった。&lt;br /&gt;
そもそも &lt;code&gt;GitBucket&lt;/code&gt; を使っている自分の会社では無理だろうと。&lt;/p&gt;

&lt;p&gt;しかし、GitBucket をしばらく運用し、プルリクエストを覚え、jenkins でテストを回そう、ということを進めていくうちに、&lt;code&gt;GitBucket&lt;/code&gt; + &lt;code&gt;Jenkins&lt;/code&gt; で案外ここに書いてあることと近いことができるのが分かってきた。&lt;/p&gt;

&lt;h2 id=&#34;requirement:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;requirement&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/takezoe/gitbucket&#34;&gt;GitBucket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.jenkins-ci.org/display/JENKINS/GitHub+pull+request+builder+plugin&#34;&gt;GitHub pull request builder plugin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;github-pull-request-builder-plugin:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;GitHub pull request builder plugin&lt;/h2&gt;

&lt;p&gt;github のプルリクエストを契機にJenkins に自動マージ、任意のジョブを実行させることができるプラグイン。&lt;br /&gt;
実際にはgithub に限らず、GitBucket でも使うことが出来る。&lt;/p&gt;

&lt;!--
また、Jenkins の Job 設定の際に使用できる `Environment Variables` があり、どのブランチからどのブランチに pull request が送られたかもわかるようになっている。  
以下、プラグインのドキュメントより引用。  

```
Environment Variables
The plugin makes some very useful environment variables available.

・ ghprbActualCommit
・ ghprbActualCommitAuthor
・ ghprbActualCommitAuthorEmail
・ ghprbPullDescription
・ ghprbPullId
・ ghprbPullLink
・ ghprbPullTitle
・ ghprbSourceBranch
・ ghprbTargetBranch
・ sha1
```
--&gt;

&lt;h2 id=&#34;settings:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;Settings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/takezoe/gitbucket/wiki/Setup-Jenkins-GitHub-pull-request-builder-plugin&#34;&gt;https://github.com/takezoe/gitbucket/wiki/Setup-Jenkins-GitHub-pull-request-builder-plugin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;リンクに従って、設定を行う。&lt;/p&gt;

&lt;p&gt;GitBucket と Jenkins の url は以下。&lt;br /&gt;
GitBucket url : &lt;code&gt;http://gitbucket.sample.co.jp/&lt;/code&gt;&lt;br /&gt;
Jenkins url : &lt;code&gt;http://192.168.10.11:8080&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jenkinsbot ユーザーを gitbucket に作成&lt;br /&gt;
jenkinsbot ユーザーが対象のレポジトリにアクセスできるように、Group に入れたり、Collaborators に入れたりしておく&lt;/li&gt;
&lt;li&gt;gitbucket レポジトリ &lt;code&gt;http://gitbucket.sample.co.jp/root/test&lt;/code&gt; を作成&lt;/li&gt;
&lt;li&gt;gitbucket レポジトリのwebhook url に &lt;code&gt;http://192.168.10.11:8080/ghprbhook/&lt;/code&gt; を設定。&lt;br /&gt;
&lt;img src=&#34;http://yutaf.github.io/images/continuous-integration-with-gitbucket-and-jenkins-01.png&#34; class=&#34;image&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;http://gitbucket.sample.co.jp/jenkinsbot/_application&lt;/code&gt; で Personal access tokens を作成&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins の設定ページで GitHub Pull Request Builder のセクションを設定する&lt;br /&gt;
&lt;code&gt;http://192.168.10.11:8080/configure&lt;/code&gt;&lt;br /&gt;
&lt;img src=&#34;http://yutaf.github.io/images/continuous-integration-with-gitbucket-and-jenkins-02.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub server api URL: &lt;code&gt;http://gitbucket.sample.co.jp/api/v3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Access Token: 上で取得したものを入力&lt;/li&gt;
&lt;li&gt;保存&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins でジョブを作成&lt;br /&gt;
testjob を作成&lt;br /&gt;
&lt;code&gt;http://192.168.10.11:8080/job/testjob/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ジョブの設定&lt;br /&gt;
&lt;code&gt;http://192.168.10.11:8080/job/testjob/configure&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GitHub project : &lt;code&gt;http://gitbucket.sample.co.jp/root/test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;ソースコード管理&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;li&gt;Repository URL: ssh://jenkinsbot@gitbucket.sample.co.jp/root/test.git&lt;/li&gt;
&lt;li&gt;Credentials : 有効なSSH キーを設定&lt;br /&gt;
高度な設定を開く&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Refspec : &lt;code&gt;+refs/pull/*:refs/remotes/origin/pr/*&lt;/code&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Branch Specifier (blank for &amp;lsquo;any&amp;rsquo;) : &lt;code&gt;${sha1}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Build trigger

&lt;ul&gt;
&lt;li&gt;GitHub Pull Request Builder&lt;/li&gt;
&lt;li&gt;Admin list = &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;保存する
&lt;img src=&#34;http://yutaf.github.io/images/continuous-integration-with-gitbucket-and-jenkins-03.png&#34; class=&#34;image&#34;&gt;&lt;br /&gt;
&lt;img src=&#34;http://yutaf.github.io/images/continuous-integration-with-gitbucket-and-jenkins-04.png&#34; class=&#34;image&#34;&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;gitbucket-のプルリクエストでテストを実行:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;GitBucket のプルリクエストでテストを実行&lt;/h2&gt;

&lt;p&gt;ここまで出来たら GitBucket 上で pull request を作成すると、jenkins でブランチの自動マージが行われ、その後 job (テスト) が実行される。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/continuous-integration-with-gitbucket-and-jenkins-05.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;h2 id=&#34;test:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;Test&lt;/h2&gt;

&lt;p&gt;どのようなテストを行っているか。&lt;/p&gt;

&lt;p&gt;Jenkins に、自動マージされたブランチのソースコードをデプロイ対象ホストの適当なディレクトリにデプロイさせる。&lt;br /&gt;
もちろん、本来のデプロイのパスではない、影響のないパスに。&lt;br /&gt;
その後、デプロイ対象ホストで unit テストを実行する。&lt;/p&gt;

&lt;p&gt;そうすることで pull request マージ後のソースコードがデプロイ対象ホストで正しく動くかを確認できる。&lt;br /&gt;
自分は db のテストを中心に書いていて、各デプロイ先ホストで db テーブルが正しく作られているか等を確認している。&lt;/p&gt;

&lt;h2 id=&#34;merged-or-closed-without-merge:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;Merged ? or Closed without merge ?&lt;/h2&gt;

&lt;p&gt;後はテストの結果を見て、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;成功したらpull request をマージして Jenkins から自動デプロイする&lt;/li&gt;
&lt;li&gt;マージされずに close されたら Jenkins は何もしない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というふうに進めたい。&lt;br /&gt;
しかし、そこまで出来ていない。&lt;br /&gt;
なぜなら、GitBucket で pull request がマージされたか、マージされずに close されたかが Jenkins 側で判別できない為。(2015.06 時点)&lt;/p&gt;

&lt;p&gt;GitBucket で pull request がマージ、もしくは close されたタイミングで Jenkins に通知を送ることは可能で、GitBucket のレポジトリに以下の様な webhook url を設定すればできる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;http://192.168.10.11:8080/job/testjob/buildWithParameters&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;通知はjson 形式で Jenkins にPOST送信され、その中にはレポジトリやブランチ、git のsha 1 等が含まている。&lt;br /&gt;
しかし、肝心の pull request がマージされたのか、マージされず close されたのかが分かる情報が含まれていない。。&lt;/p&gt;

&lt;p&gt;その為、今はマージした後にブランチを手元に pull してから デプロイを行っている。&lt;/p&gt;

&lt;p&gt;GitBucket のソースコードを調べてみると、マージを判定する値の部分がコメントアウトされていた。&lt;br /&gt;
いずれのアップデートで含まれるようになるのだろうか。。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/takezoe/gitbucket/search?l=scala&amp;amp;q=merged&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&#34;&gt;https://github.com/takezoe/gitbucket/search?l=scala&amp;amp;q=merged&amp;amp;type=Code&amp;amp;utf8=%E2%9C%93&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;感想:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;今まで、手元でたまに行っていたテストを pull request をきっかけに自動的に実行出来るようになったので、安心感が増した。&lt;br /&gt;
これをきっかけにテストを今までよりちゃんと書こうと思う。&lt;/p&gt;

&lt;h2 id=&#34;参考:ecdde15144661f1ec91b92fcff83e0bc&#34;&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/oovu70/20130118/p1&#34;&gt;JenkinsプラグインのGitHub pull request builder pluginを使ってみる&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>php max_input_vars makes you lose form values</title>
      <link>http://yutaf.github.io/php-max-input-vars/</link>
      <pubDate>Tue, 19 May 2015 14:55:52 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-max-input-vars/</guid>
      <description>&lt;p&gt;ie(11) でのみ form で送られるべき値が送られてこないということが起きた。&lt;br /&gt;
最初は js のバグかと思っていたが、php の設定が問題だった。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.softel.co.jp/blogs/tech/archives/3591&#34;&gt;【php】max_input_varsの影響でフォームの値を全部受け取れないことがある   at softelメモ&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;問題
フォームから送信した値が、サーバー側（php）で取得できない。

プログラムは動いてるみたいなんだけど、あるはずの $_REQUEST[‘hoge’] などがないみたい。

どうなってるのこれ？

答え
以下の条件に当てはまるようなら、phpのmax_input_varsの設定値の影響かもしれない。

...

max_input_vars integer

入力変数を最大で何個まで受け付けるかを指定します 
(この制限は、スーパーグローバル $_GET、$_POST そして $_COOKIE にそれぞれ個別に適用されます)。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;対象サーバーの &lt;code&gt;max_input_vars&lt;/code&gt; は 150 だったので、300 まで上げた。&lt;br /&gt;
解決した。&lt;/p&gt;

&lt;p&gt;それにしても ie(11) だけで起こった理由がわからない。&lt;br /&gt;
他のブラウザよりも多くのフォーム値を送信しているということ？&lt;/p&gt;

&lt;p&gt;同じ実装ではないが、次のような記事を見つけた。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://hack.aipo.com/archives/5998/&#34;&gt;inputタグのonclickでform.submit()を実行しているため、IEだけ二重にリクエストが送信される時の対処法&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この対処法は自分の場合は有効でなかった。&lt;br /&gt;
とりあえず、&lt;code&gt;max_input_vars&lt;/code&gt; の値には気をつける。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>第89回 PHP勉強会＠東京</title>
      <link>http://yutaf.github.io/php-study-89/</link>
      <pubDate>Thu, 30 Apr 2015 18:14:33 +0900</pubDate>
      
      <guid>http://yutaf.github.io/php-study-89/</guid>
      <description>

&lt;p&gt;先日、&lt;a href=&#34;http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/&#34;&gt;デプロイツールを作成したという記事&lt;/a&gt;を投稿したが、&lt;a href=&#34;https://phpstudy.doorkeeper.jp/events/23826&#34;&gt;第89回 PHP勉強会＠東京&lt;/a&gt; でそれについての発表を行った。&lt;/p&gt;

&lt;p&gt;当日の朝に自分が発表者になっていることに気づき、大急ぎで資料を準備して発表に臨んだ。&lt;br /&gt;
結果、資料の完成度の低さ、発表の段取りや分量など、かなり失敗して恥ずかしかったが、気付きもあったのでチャレンジしてよかった。&lt;br /&gt;
ちなみに、これは自分にとって初めての社外の人に向けた発表だった。&lt;/p&gt;

&lt;script async class=&#34;speakerdeck-embed&#34; data-id=&#34;a57e354b64c9494eb03f30e5a38afa27&#34; data-ratio=&#34;1.33333333333333&#34; src=&#34;//speakerdeck.com/assets/embed.js&#34;&gt;&lt;/script&gt;

&lt;h2 id=&#34;発表を通じてわかったこと:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;発表の時間配分&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本題に入る前に時間が終わるというひどい体たらくだった。&lt;br /&gt;
今後、リハーサルはしっかりやろう、自分。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参加者のデプロイツール使用状況&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;参加者の方のデプロイ状況を知りたかったので、発表中に聞いてみた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイツールを使っている人数&lt;br /&gt;
20-30 / 60 人&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;内訳&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;capistrano 95 %&lt;/li&gt;
&lt;li&gt;fabric 1人?&lt;/li&gt;
&lt;li&gt;rocketeer 1人?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なんだかんだ capistrano 人気の根強さに驚いた。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;質問&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;発表に対する質問も受けた。そのおかげで、デプロイに関してのポイントや自分が気づいていないところに気づけたので、質問者の方には感謝したい。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「既存のツールを使わないで、自分たちで作ったツールを使うメリットは？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;その時は上手く答えられなかったので、ここに書こうと思う。&lt;/p&gt;

&lt;p&gt;メリットは、自分たちの仕事に最適化したツールが作れるということ。&lt;br /&gt;
既存のツールの不要な機能をそぎ落として、自分たちに必要な最低限のものを作れる。&lt;/p&gt;

&lt;p&gt;デメリットは、しっかりメンテナンスをしなければならないこと。&lt;br /&gt;
スライド中にある、フロントツールのビルドに時間がかかるといった問題のように、時間の経過とともに出てくる問題に対処出来なければ使い続けていけるツールにならない。&lt;/p&gt;

&lt;p&gt;また、既存のツールと違い、ネット上に情報が集積されていないので、作成者以外の人間が理解できるようドキュメントの整備は既存のツール以上にしっかりやらなければならない。&lt;/p&gt;

&lt;p&gt;この辺りのことを考えると本当に一長一短で、 今後上手く行かなくなった時の選択肢として、 capistrano やその他の方法も考慮しておかなければと思っている。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「APC, OPcache を使用しているアプリケーションのデプロイは上手くいくか」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;恥ずかしながら、APC, OPcache について知らなかった。&lt;br /&gt;
&lt;a href=&#34;https://www.xserver.ne.jp/manual/man_server_php_apc.php&#34;&gt;https://www.xserver.ne.jp/manual/man_server_php_apc.php&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;「APC」や「OPcache」とは、PHPの高速化、CPU負荷を軽減するための拡張モジュールです。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;これらの拡張機能においては、PHPの初回実行時に、PHPの内容を最適化した状態でキャッシュしておき、次回以降、同じPHPにアクセスがあった際にキャッシュを利用することで、PHP実行時のCPU負荷の軽減や、PHPの大幅な高速化を図ることが可能です。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;おそらくこの質問者の方が聞きたかったことに関連する記事もあった。&lt;br /&gt;
&lt;a href=&#34;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&#34;&gt;http://kohkimakimoto.hatenablog.com/entry/2014/09/13/154342&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;OPcacheはシンボリックを解決して、実ファイルパスの状態でキャッシュする。&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;よってシンボリックリンクを更新しても、実ファイルパスのキャッシュが保持されてしまう。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;つまり、capistrano のようなシンボリックリンクを切り替えることでデプロイを実現しているツールでは、OPcache のキャッシュの影響で最新のファイルが実行・表示されないという問題があるらしい。&lt;br /&gt;
もちろん、上記ブログではその解決策も記されている。&lt;br /&gt;
こういった問題があることは全く知らなかったので勉強になった。&lt;/p&gt;

&lt;p&gt;ryogoku に関して言えば、シンボリックリンクを張り替えず、実ファイルを上書きする作りになっているので、OPcache を使っていても問題にならない。&lt;/p&gt;

&lt;p&gt;一方で考えたことは、OPcache を使うような高いパフォーマンスが求められるアプリケーションでは、シンボリックリンクを切り替えるタイプのゼロダウンタイムなデプロイが求められるのではないかということ。&lt;br /&gt;
そういったアプリケーションには ryogoku は不向きだと思った。&lt;/p&gt;

&lt;p&gt;逆にどんなものが向いているか考えると、静的なコンテンツやブログ、CMSなど、コンマ何秒間のダウンタイムが問題にならないものかと思う。&lt;br /&gt;
言い換えれば、自分たちが普段仕事で開発しているアプリケーションがそういったもので、その範囲であれば ryogoku は十分なツールだと思っている。&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「ロールバックはどうしている？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ryogoku には revert というコマンドがあり、それでロールバックを実現している。&lt;br /&gt;
このコマンドの実際の動作がどうなっているかというと、戻りたいgit の commit id を指定してデプロイしている。&lt;br /&gt;
つまり、バックアップからの復元でない。&lt;br /&gt;
大抵はこれで上手くロールバックできるが、正直、上手くいかなかったこともある。&lt;/p&gt;

&lt;p&gt;細かい話になるので簡単に言いたいが、あるデプロイを境に rsync の除外リストから外されたファイル(転送対象になったファイル)があると、ロールバックしたときに不要なファイルがデプロイ先サーバーに残ってしまうことがある。&lt;br /&gt;
これは今後改善しなくてはと思っている。&lt;/p&gt;

&lt;p&gt;ちなみに capistrano であれば、デプロイごとにアプリケーションをまるまるディレクトリごと作成して、シンボリックリンクを張り替えて対応しているので、ロールバックも過去のディレクトリにリンクを張り替えればいいだけなので、確実。&lt;/p&gt;

&lt;p&gt;ただ、ryogoku をシンボリックリンクを張り替えるつくりにはしたくないので、なにか考えないといけない。&lt;/p&gt;

&lt;h2 id=&#34;発表を通じてわかったこと-まとめ:7149dfda08329ddc55c18fd7a9f0c118&#34;&gt;発表を通じてわかったこと・まとめ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;勉強会は補欠になっていても、繰り上がって発表者になることもあるので笑、準備はしておくこと&lt;/li&gt;
&lt;li&gt;自作ツールは自分たちの仕事に合わせた細かい調整が利くが、メンテナンスやドキュメント整備を続ける責任がある&lt;/li&gt;
&lt;li&gt;ryogoku は静的なコンテンツやブログ、CMS といったコンマ何秒程度のダウンタイムを気にしなくていいアプリケーションのデプロイに向いている&lt;/li&gt;
&lt;li&gt;ryogoku のロールバックには改善の余地あり&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Paul Mccartney Japan Tour 04.27.15</title>
      <link>http://yutaf.github.io/paul-mccartney-japan-tour-042715/</link>
      <pubDate>Wed, 29 Apr 2015 13:04:40 +0900</pubDate>
      
      <guid>http://yutaf.github.io/paul-mccartney-japan-tour-042715/</guid>
      <description>&lt;p&gt;2公演観に行くうちの二回目。&lt;br /&gt;
この日は父と見に行った。&lt;br /&gt;
父は1950年生まれで、ビートルズ世代。&lt;br /&gt;
親孝行。笑&lt;/p&gt;

&lt;p&gt;I went with my father this day.&lt;br /&gt;
Paul played &amp;ldquo;I Saw Her Standing There&amp;rdquo; !!&lt;br /&gt;
I danced to it.&lt;br /&gt;
My father never danced, but he seemed to enjoy it very much.&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/VjzUWsgB4kk&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Set List&lt;br /&gt;
1. Magical Mystery Tour (The Beatles song)&lt;br /&gt;
2. Save Us&lt;br /&gt;
3. Can&amp;rsquo;t Buy Me Love (The Beatles song)&lt;br /&gt;
4. Listen to What the Man Said (Wings song)&lt;br /&gt;
5. Let Me Roll It (Wings song)&lt;br /&gt;
6. Paperback Writer (The Beatles song)&lt;br /&gt;
7. My Valentine&lt;br /&gt;
8. Nineteen Hundred and Eighty-Five (Wings song)&lt;br /&gt;
9. The Long and Winding Road (The Beatles song)&lt;br /&gt;
10. Maybe I&amp;rsquo;m Amazed&lt;br /&gt;
11. I&amp;rsquo;ve Just Seen a Face (The Beatles song)&lt;br /&gt;
12. We Can Work It Out (The Beatles song)&lt;br /&gt;
13. Another Day&lt;br /&gt;
14. Hope for the Future&lt;br /&gt;
15. And I Love Her (The Beatles song)&lt;br /&gt;
16. Blackbird (The Beatles song)&lt;br /&gt;
17. Here Today&lt;br /&gt;
18. New&lt;br /&gt;
19. Queenie Eye&lt;br /&gt;
20. Lady Madonna (The Beatles song)&lt;br /&gt;
21. All Together Now (The Beatles song)&lt;br /&gt;
22. Lovely Rita (The Beatles song)&lt;br /&gt;
23. Eleanor Rigby (The Beatles song)&lt;br /&gt;
24. Being for the Benefit of Mr. Kite! (The Beatles song)&lt;br /&gt;
25. Something (The Beatles song)&lt;br /&gt;
26. Ob-La-Di, Ob-La-Da (The Beatles song)&lt;br /&gt;
27. Band on the Run (Wings song)&lt;br /&gt;
28. Back in the U.S.S.R. (The Beatles song)&lt;br /&gt;
29. Let It Be (The Beatles song)&lt;br /&gt;
30. Live and Let Die (Wings song)&lt;br /&gt;
31. Hey Jude&lt;/p&gt;

&lt;p&gt;Encore:&lt;br /&gt;
32. Day Tripper (The Beatles song)&lt;br /&gt;
33. Hi, Hi, Hi (Wings song)&lt;br /&gt;
34. I Saw Her Standing There (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore 2:&lt;br /&gt;
35. Yesterday (The Beatles song)&lt;br /&gt;
36. Helter Skelter (The Beatles song)&lt;br /&gt;
37. Golden Slumbers (The Beatles song)&lt;br /&gt;
38. Carry That Weight (The Beatles song)&lt;br /&gt;
39. The End (The Beatles song)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Paul McCartney Japan Tour 04.25.15</title>
      <link>http://yutaf.github.io/paul-mccartney-japan-tour-042515/</link>
      <pubDate>Sun, 26 Apr 2015 00:37:21 +0900</pubDate>
      
      <guid>http://yutaf.github.io/paul-mccartney-japan-tour-042515/</guid>
      <description>&lt;p&gt;2公演観に行くうちの一回目。&lt;br /&gt;
チケットは安くはないので2回も行く必要なかったんじゃないかと思っていたが、そんなことはなかった!!&lt;/p&gt;

&lt;p&gt;最高にロックしていて素晴らしかった。&lt;/p&gt;

&lt;p&gt;そして、観客のノリの良さがライブを特別なものにしていた。&lt;br /&gt;
会場全体からのポールに対する愛の強さが半端じゃない。&lt;/p&gt;

&lt;p&gt;個人的に一番良かった曲は &amp;ldquo;Maybe I&amp;rsquo;m Amazed&amp;rdquo;&lt;br /&gt;
2013年に聞けなかった &amp;ldquo;Jet&amp;rdquo; も聞けたので満足。&lt;/p&gt;

&lt;p&gt;月曜も楽しみ。&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/fOH7BCfY9DM&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/4qZsGnIoqug&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;style&gt;.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }&lt;/style&gt;&lt;div class=&#39;embed-container&#39;&gt;&lt;iframe src=&#39;http://www.youtube.com/embed/dEyx7H1YXaA&#39; frameborder=&#39;0&#39; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-01.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-02.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/paul-03.jpg&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;p&gt;Set list&lt;br /&gt;
1.  Eight Days a Week (The Beatles song)&lt;br /&gt;
2.  Save Us&lt;br /&gt;
3.  All My Loving (The Beatles song)&lt;br /&gt;
4.  Jet (Wings song)&lt;br /&gt;
5.  Let Me Roll It (Wings song)&lt;br /&gt;
6.  Paperback Writer (The Beatles song)&lt;br /&gt;
7.  My Valentine&lt;br /&gt;
8.  Nineteen Hundred and Eighty-Five (Wings song)&lt;br /&gt;
9.  The Long and Winding Road (The Beatles song)&lt;br /&gt;
10. Maybe I&amp;rsquo;m Amazed&lt;br /&gt;
11. I&amp;rsquo;ve Just Seen a Face (The Beatles song)&lt;br /&gt;
12. We Can Work It Out (The Beatles song)&lt;br /&gt;
13. Another Day&lt;br /&gt;
14. Hope for the Future&lt;br /&gt;
15. And I Love Her (The Beatles song)&lt;br /&gt;
16. Blackbird (The Beatles song)&lt;br /&gt;
17. Here Today&lt;br /&gt;
18. New&lt;br /&gt;
19. Queenie Eye&lt;br /&gt;
20. Lady Madonna (The Beatles song)&lt;br /&gt;
21. All Together Now (The Beatles song)&lt;br /&gt;
22. Lovely Rita (The Beatles song)&lt;br /&gt;
23. Eleanor Rigby (The Beatles song)&lt;br /&gt;
24. Being for the Benefit of Mr. Kite! (The Beatles song)&lt;br /&gt;
25. Something (The Beatles song)&lt;br /&gt;
26. Ob-La-Di, Ob-La-Da (The Beatles song)&lt;br /&gt;
27. Band on the Run (Wings song)&lt;br /&gt;
28. Back in the U.S.S.R. (The Beatles song)&lt;br /&gt;
29. Let It Be (The Beatles song)&lt;br /&gt;
30. Live and Let Die (Wings song)&lt;br /&gt;
31. Hey Jude (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore:&lt;br /&gt;
32. Day Tripper (The Beatles song)&lt;br /&gt;
33. Hi, Hi, Hi (Wings song)&lt;br /&gt;
34. Can&amp;rsquo;t Buy Me Love (The Beatles song)&lt;/p&gt;

&lt;p&gt;Encore 2:&lt;br /&gt;
35. Yesterday (The Beatles song)&lt;br /&gt;
36. Helter Skelter (The Beatles song)&lt;br /&gt;
37. Golden Slumbers (The Beatles song)&lt;br /&gt;
38. Carry That Weight (The Beatles song)&lt;br /&gt;
39. The End (The Beatles song)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>provisioning with itamae</title>
      <link>http://yutaf.github.io/provisioning-with-itamae/</link>
      <pubDate>Tue, 07 Apr 2015 22:42:50 +0900</pubDate>
      
      <guid>http://yutaf.github.io/provisioning-with-itamae/</guid>
      <description>

&lt;p&gt;I provisioned my company&amp;rsquo;s webhook server with &lt;a href=&#34;https://github.com/itamae-kitchen/itamae&#34;&gt;itamae&lt;/a&gt; recently.&lt;br /&gt;
itamae is a &lt;em&gt;very simple&lt;/em&gt; provisioning tool created by &lt;a href=&#34;https://cookpad.com/en/categories/japanese-recipes&#34;&gt;cookpad&lt;/a&gt; and formerly they called it as Lightchef.&lt;/p&gt;

&lt;p&gt;I have never used provisioning tools like Chef or Ansible at all.&lt;br /&gt;
But I could learn itamae for 2,3 hours and began to provision.&lt;br /&gt;
It is very easy to start provisioning with itamae.&lt;br /&gt;
I like it.&lt;/p&gt;

&lt;h2 id=&#34;how-to-use-it:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;How to use it&lt;/h2&gt;

&lt;p&gt;First of all we need &lt;code&gt;recipe&lt;/code&gt; to provision.&lt;br /&gt;
Here&amp;rsquo;s my recipe to install ruby with rbenv.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;recipes/ruby.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;install rbenv&amp;quot; do
  command &amp;quot;
    git clone https://github.com/sstephenson/rbenv.git ~/.rbenv &amp;amp;&amp;amp; \
    echo &#39;export PATH=\&amp;quot;$HOME/.rbenv/bin:$PATH\&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc  &amp;amp;&amp;amp; \
    echo &#39;eval \&amp;quot;$(rbenv init -)\&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; \
    git clone https://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
  &amp;quot;
  not_if &amp;quot;test -d ~/.rbenv&amp;quot;
end
execute &amp;quot;install ruby&amp;quot; do
  command &amp;quot;rbenv install 2.2.1 &amp;amp;&amp;amp; rbenv global 2.2.1&amp;quot;
  not_if &amp;quot;test -d /root/.rbenv/versions/2.2.1&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then execute this recipe via ssh.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;itamae ssh -h 54.64.46.48 -u webhook recipes/ruby.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;details:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Details&lt;/h2&gt;

&lt;h4 id=&#34;about-recipe:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;About recipe&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t need to write &lt;code&gt;sudo&lt;/code&gt; specifically because itamae automatically does it well.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not_if&lt;/code&gt; is very useful &lt;a href=&#34;https://github.com/itamae-kitchen/itamae/wiki/Resources&#34;&gt;resource&lt;/a&gt;.&lt;br /&gt;
With that we can avoid unnecessary execution of recipes when we do it repeatedly.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;execution:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Execution&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;we can of course execute itamae locally not via ssh.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;more:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;More&lt;/h2&gt;

&lt;h4 id=&#34;including-recipes:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;Including Recipes&lt;/h4&gt;

&lt;p&gt;Paths are indicated relatively from the recipe.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;include_recipe &amp;quot;yum.rb&amp;quot;
include_recipe &amp;quot;apache22-php.rb&amp;quot;
include_recipe &amp;quot;ruby.rb&amp;quot;
include_recipe &amp;quot;gem.rb&amp;quot;
include_recipe &amp;quot;npm.rb&amp;quot;
include_recipe &amp;quot;ryogoku.rb&amp;quot;
include_recipe &amp;quot;add_deploy_user.rb&amp;quot;
include_recipe &amp;quot;add_webhook_script.rb&amp;quot;
include_recipe &amp;quot;cron.rb&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;my-other-recipes:40fe1895693cb84a0b6def29bb369ea9&#34;&gt;My other recipes&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;recipes/add_deploy_user.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;add deploy user&amp;quot; do
  # you cannot ssh unless changing password
  command &amp;quot;
    adduser --system --shell /bin/bash --home-dir /home/deploy --user-group deploy &amp;amp;&amp;amp; \
    passwd -f -u deploy &amp;amp;&amp;amp; \
    mkdir -p /home/deploy/.ssh
  &amp;quot;
  not_if &amp;quot;grep ^deploy /etc/passwd&amp;quot;
end
# Set up key
remote_directory &amp;quot;/home/deploy/.ssh&amp;quot; do
  source &amp;quot;../templates/.ssh/&amp;quot;
end
execute &amp;quot;Change ssh files permission&amp;quot; do
  command &amp;quot;
    chown -R deploy:deploy /home/deploy &amp;amp;&amp;amp; \
    chmod 700 /home/deploy/.ssh &amp;amp;&amp;amp; \
    chmod 600 /home/deploy/.ssh/authorized_keys &amp;amp;&amp;amp; \
    chmod 600 /home/deploy/.ssh/id_rsa
  &amp;quot;
end
execute &amp;quot;disable requiretty&amp;quot; do
  command &amp;quot;sed -i &#39;s;^Defaults *requiretty;#&amp;amp;;g&#39; /etc/sudoers&amp;quot;
end
execute &amp;quot;enable apache user to execute ryogoku without password&amp;quot; do
  command &amp;quot;echo &#39;apache  ALL=(deploy) NOPASSWD: /usr/local/bin/ryogoku&#39; &amp;gt;&amp;gt; /etc/sudoers&amp;quot;
  not_if &amp;quot;grep ^apache /etc/sudoers&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;recipes/apache22-php.rb&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;execute &amp;quot;mkdir -p /usr/local/src&amp;quot; do
  command &amp;quot;mkdir -p /usr/local/src&amp;quot;
  not_if &amp;quot;test -d /usr/local/src&amp;quot;
end

#
# apache
#

execute &amp;quot;download apache tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; curl -L -O http://apache.cs.utah.edu//httpd/httpd-2.2.29.tar.gz&amp;quot;
  not_if &amp;quot;test -e /usr/local/src/httpd-2.2.29.tar.gz&amp;quot;
end

execute &amp;quot;tar apache tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; tar xzvf httpd-2.2.29.tar.gz&amp;quot;
  not_if &amp;quot;test -d /usr/local/src/httpd-2.2.29&amp;quot;
end

execute &amp;quot;install apache&amp;quot; do
  command &amp;quot;
  cd /usr/local/src/httpd-2.2.29 &amp;amp;&amp;amp; \
  ./configure \
    --prefix=/opt/apache2.2.29 \
    --enable-mods-shared=all \
    --enable-proxy \
    --enable-ssl \
    --with-ssl \
    --with-mpm=prefork \
    --with-pcre &amp;amp;&amp;amp; \
  make &amp;amp;&amp;amp; \
  make install
  &amp;quot;
  not_if &amp;quot;test -d /opt/apache2.2.29&amp;quot;
end

# Apache config
sed_scripts_for_httpd_conf = [
  &#39;s/^Listen 80/#&amp;amp;/&#39;,
  &#39;s/^DocumentRoot/#&amp;amp;/&#39;,
  &#39;/^&amp;lt;Directory/,/^&amp;lt;\/Directory/s/^/#/&#39;,
  &#39;s;ScriptAlias /cgi-bin;#&amp;amp;;&#39;,
  &#39;s;#\(Include conf/extra/httpd-mpm.conf\);\1;&#39;,
  &#39;s;#\(Include conf/extra/httpd-default.conf\);\1;&#39;,
  &#39;/^\s*DirectoryIndex/s/$/ index.php/&#39;, # DirectoryIndex; index.html precedes index.php
  # Change User &amp;amp; Group
  &#39;s;^\(User \)daemon$;\1apache;&#39;,
  &#39;s;^\(Group \)daemon$;\1apache;&#39;
]

sed_scripts_for_httpd_conf.each do |sed_script_for_httpd_conf|
  execute sed_script_for_httpd_conf do
    command &#39;sed -i \&#39;&#39; + sed_script_for_httpd_conf + &#39;\&#39; /opt/apache2.2.29/conf/httpd.conf&#39;
  end
end

execute &amp;quot;edit httpd.conf&amp;quot; do
  command &#39;echo &amp;quot;Include /srv/apache/apache.conf&amp;quot; &amp;gt;&amp;gt; /opt/apache2.2.29/conf/httpd.conf&#39;
  not_if &amp;quot;grep /srv/apache/apache.conf /opt/apache2.2.29/conf/httpd.conf&amp;quot;
end

execute &amp;quot;edit httpd-defaut.conf&amp;quot; do
  command &#39;sed -i &amp;quot;s/\(ServerTokens \)Full/\1Prod/&amp;quot; /opt/apache2.2.29/conf/extra/httpd-default.conf&#39;
end

# Change User &amp;amp; Group
#  useradd --system --shell /usr/sbin/nologin --user-group --home /dev/null apache; \
execute &amp;quot;add apache user &amp;amp; group&amp;quot; do
  command &amp;quot;useradd --system --shell /usr/sbin/nologin --user-group --home /dev/null apache&amp;quot;
  not_if &amp;quot;grep &#39;^apache&#39; /etc/passwd&amp;quot;
end

execute &amp;quot;mkdir -p /srv/apache&amp;quot; do
  command &amp;quot;mkdir -p /srv/apache&amp;quot;
  not_if &amp;quot;test -d /srv/apache&amp;quot;
end

remote_file &amp;quot;/srv/apache/apache.conf&amp;quot; do
  source &amp;quot;../templates/apache.conf&amp;quot;
end

execute &amp;quot;set apache CustomLog&amp;quot; do
  command &#39;echo \&#39;CustomLog &amp;quot;|/opt/apache2.2.29/bin/rotatelogs /srv/www/logs/access/access.%Y%m%d.log 86400 540&amp;quot; combined\&#39; &amp;gt;&amp;gt; /srv/apache/apache.conf&#39;
  not_if &amp;quot;grep &#39;^CustomLog&#39; /srv/apache/apache.conf&amp;quot;
end

execute &amp;quot;set apache ErrorLog&amp;quot; do
  command &#39;echo \&#39;ErrorLog &amp;quot;|/opt/apache2.2.29/bin/rotatelogs /srv/www/logs/error/error.%Y%m%d.log 86400 540&amp;quot;\&#39; &amp;gt;&amp;gt; /srv/apache/apache.conf&#39;
  not_if &amp;quot;grep &#39;^ErrorLog&#39; /srv/apache/apache.conf&amp;quot;
end

execute &amp;quot;make log dirs&amp;quot; do
  command &amp;quot;mkdir -m 777 -p /srv/www/logs/{access,error,app}&amp;quot;
  not_if &amp;quot;test -d /srv/www/logs/access&amp;quot;
end

execute &amp;quot;make Apache document root&amp;quot; do
  command &amp;quot;mkdir -p /srv/www/htdocs/&amp;quot;
  not_if &amp;quot;test -d /srv/www/htdocs/&amp;quot;
end

#
# php
#

execute &amp;quot;download php tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; curl -L -O http://php.net/distributions/php-5.6.7.tar.gz&amp;quot;
  not_if &amp;quot;test -e /usr/local/src/php-5.6.7.tar.gz&amp;quot;
end

execute &amp;quot;tar php tarball&amp;quot; do
  command &amp;quot;cd /usr/local/src &amp;amp;&amp;amp; tar xzvf php-5.6.7.tar.gz&amp;quot;
  not_if &amp;quot;test -d /usr/local/src/php-5.6.7&amp;quot;
end

execute &amp;quot;install php&amp;quot; do
  command &amp;quot;
  cd /usr/local/src/php-5.6.7 &amp;amp;&amp;amp; \
  ./configure \
    --prefix=/opt/php-5.6.7 \
    --with-config-file-path=/srv/php \
    --with-apxs2=/opt/apache2.2.29/bin/apxs \
    --with-libdir=lib64 \
    --enable-mbstring \
    --enable-intl \
    --with-icu-dir=/usr \
    --with-gettext=/usr \
    --with-pcre-regex=/usr \
    --with-pcre-dir=/usr \
    --with-readline=/usr \
    --with-libxml-dir=/usr/bin/xml2-config \
    --with-zlib=/usr \
    --with-zlib-dir=/usr \
    --with-gd \
    --with-jpeg-dir=/usr \
    --with-png-dir=/usr \
    --with-freetype-dir=/usr \
    --enable-gd-native-ttf \
    --enable-gd-jis-conv \
    --with-openssl=/usr \
    --with-mcrypt=/usr \
    --enable-bcmath \
    --with-curl \
    --enable-exif &amp;amp;&amp;amp; \
  make &amp;amp;&amp;amp; \
  make install
  &amp;quot;
  not_if &amp;quot;test -d /opt/php-5.6.7&amp;quot;
end

#
# xdebug
#

# set php PATH because using phpize for xdebug installation
execute &amp;quot;set php PATH&amp;quot; do
  command &amp;quot;echo &#39;export PATH=/opt/php-5.6.7/bin:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc&amp;quot;
  not_if &amp;quot;grep /opt/php-5.6.7/bin ~/.bashrc&amp;quot;
end

execute &amp;quot;install xdebug&amp;quot; do
  command &amp;quot;
    cd /usr/local/src &amp;amp;&amp;amp; \
    curl -L -O http://xdebug.org/files/xdebug-2.3.2.tgz &amp;amp;&amp;amp; \
    tar -xzf xdebug-2.3.2.tgz &amp;amp;&amp;amp; \
    cd xdebug-2.3.2 &amp;amp;&amp;amp; \
    phpize &amp;amp;&amp;amp; \
    ./configure --enable-xdebug &amp;amp;&amp;amp; \
    make &amp;amp;&amp;amp; \
    make install
  &amp;quot;
  not_if &amp;quot;test -e /opt/php-5.6.7/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so&amp;quot;
end

# php.ini
execute &amp;quot;mkdir -p /srv/php&amp;quot; do
  command &amp;quot;mkdir -p /srv/php&amp;quot;
  not_if &amp;quot;test -d /srv/php&amp;quot;
end
remote_file &amp;quot;/srv/php/php.ini&amp;quot; do
  source &amp;quot;../templates/php.ini&amp;quot;
end
execute &amp;quot;Add zend_extension directive&amp;quot; do
  command &amp;quot;echo &#39;zend_extension = \&amp;quot;/opt/php-5.6.7/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so\&amp;quot;&#39; &amp;gt;&amp;gt; /srv/php/php.ini&amp;quot;
  not_if &amp;quot;grep ^zend_extension /srv/php/php.ini&amp;quot;
end


execute &amp;quot;start apache&amp;quot; do
  command &amp;quot;/opt/apache2.2.29/bin/apachectl start&amp;quot;
  not_if &amp;quot;ps aux | grep httpd | grep -v grep&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>I made a deployment tool - ryogoku</title>
      <link>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</link>
      <pubDate>Wed, 25 Mar 2015 23:11:48 +0900</pubDate>
      
      <guid>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</guid>
      <description>

&lt;p&gt;rsync によるデプロイツール・&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt; を作成した。&lt;br /&gt;
I made a deployment tool, &lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt;.&lt;br /&gt;
It uses &lt;code&gt;rsync&lt;/code&gt; to deploy.&lt;/p&gt;

&lt;h2 id=&#34;why:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;why&lt;/h2&gt;

&lt;p&gt;会社でデプロイの自動化を進めており、何か良いツールはないか探していた。&lt;br /&gt;
ちなみに自分の会社は以下の様な条件での仕事が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受託業務中心。納品するのは php アプリケーション&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;プロダクション・サーバーがクライアントの所有で自由にツール類をインストールできない。git や ruby 等が入っていないことが殆ど。&lt;/li&gt;
&lt;li&gt;web サーバー2台の db サーバー1台という小規模な構成が殆ど。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの条件に見合うようなデプロイツールを探して、色々情報を集めた。&lt;br /&gt;
特に参考になったのはこのページ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/naoya/20130118/1358477523&#34;&gt;開発メモ#1 : Cinnamon によるデプロイ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして、最終的には以下の様な理由で自作することにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano は複雑そう。また、php のアプリで ruby のツールを使いたくなかった。&lt;/li&gt;
&lt;li&gt;fabric も検討したが、デザイナー含めた他のメンバーに homebrew や pip 等のインストール作業をさせるのがハードルだと感じた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; というシェルスクリプトのデプロイツールを発見し、インストールが楽なこととシンプルな使い方がとても良いと感じた。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/futoase/items/c2ac39cfe28813b79bc4&#34;&gt;【個人メモ】デプロイするためにdeployを使ってみる&lt;/a&gt;&lt;br /&gt;
しかし、デプロイ先サーバーでの git インストールが必須な点と、複数台のホストに対して実行出来ない点が自分の目的とそぐわなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上から、&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; をベースに、殆どの unix マシンで使用可能な rsync 使ったツールを作成することにした。&lt;/p&gt;

&lt;p&gt;I wanted simple deployment tool suitable for my work.&lt;br /&gt;
My work is like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making php applications that are outsourced from various clients.&lt;/li&gt;
&lt;li&gt;Production servers are properties of clients, and softwares like git or ruby are rarely installed in them.&lt;br /&gt;
And also I am not permitted to install softwares.&lt;/li&gt;
&lt;li&gt;Server cluster is consisted of 2 web servers and 1 database server in most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started searching tools to match these conditions.&lt;br /&gt;
But I eventually decide to make my own one after a while surfing the web.&lt;br /&gt;
Because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano seemed to be too complicated.&lt;/li&gt;
&lt;li&gt;fabric seemed much better than capistrano, but I thought it was still hard for my team to install homebrew or pip things.&lt;/li&gt;
&lt;li&gt;I found &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; on github.&lt;br /&gt;
that&amp;rsquo;s cool deployment tool because installation and usage were very simpler than others.&lt;br /&gt;
But it requires git to be installed in deployment servers and doesn&amp;rsquo;t support deployment to multiple hosts.&lt;br /&gt;
That didn&amp;rsquo;t match my purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to make my own one based on &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;br /&gt;
Thank you, &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-it-is-like-ryogoku:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;What it is like - ryogoku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;https://github.com/yutaf/ryogoku&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Clone the repository from github, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/ryogoku-01.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuration:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ryogoku.conf&lt;/code&gt; を git レポジトリルートに作成し、以下の様な内容を書く。&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;ryogoku.conf&lt;/code&gt; at the git repository root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[prod]
user rob
host 128.199.170.128 128.199.244.193
path /var/www/html
ref master
pre-rsync ./bin/pre-rsync
post-deploy /var/www/html/bin/update.sh &amp;amp;&amp;amp; /var/www/html/bin/update.prod.sh
umask 002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容について簡単に説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイ先は&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; はデプロイする git のリビジョンを指定&lt;br /&gt;
コマンドライン引数での指定も可能で、その場合はコマンドライン引数の値が優先される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; は rsync を行う前に実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; は rsync を行ったあとに実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; はファイルパーミッションを設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What directives in this configuration file means are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deploying to&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; is the git revision to be deployed.&lt;br /&gt;
This value can also be set by command line argument, which is prior to config one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; defines commands that are executed before rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; defines commands that are executed after rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; defines the file permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;execution:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Execution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、master リビジョンが prod で指定したホストにデプロイされる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;master&lt;/code&gt; revision is deployed to the hosts defined in &lt;code&gt;prod&lt;/code&gt; section by this command.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;git リビジョンを指定する場合は、コマンドラインの引数に渡す。&lt;/p&gt;

&lt;p&gt;If you want to deploy specific revision, you can pass an argument to command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod HEAD^^
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod b7ea7b3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod 1.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod develop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>