<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>yutaf blog</title>
    <link>http://yutaf.github.io/</link>
    <description>Recent content on yutaf blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Copyright Yuta Fujishiro</copyright>
    <lastBuildDate>Wed, 25 Mar 2015 23:11:48 +0900</lastBuildDate>
    <atom:link href="http://yutaf.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>I made a deployment tool - ryogoku</title>
      <link>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</link>
      <pubDate>Wed, 25 Mar 2015 23:11:48 +0900</pubDate>
      
      <guid>http://yutaf.github.io/i-made-a-deployment-tool-ryogoku/</guid>
      <description>

&lt;p&gt;rsync によるデプロイツール・&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt; を作成した。&lt;br /&gt;
I made a deployment tool, &lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;ryogoku&lt;/a&gt;.&lt;br /&gt;
It uses &lt;code&gt;rsync&lt;/code&gt; to deploy.&lt;/p&gt;

&lt;h2 id=&#34;why:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;why&lt;/h2&gt;

&lt;p&gt;会社でデプロイの自動化を進めており、何か良いツールはないか探していた。&lt;br /&gt;
ちなみに自分の会社は以下の様な条件での仕事が多い。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;受託業務中心。納品するのは php アプリケーション&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;プロダクション・サーバーがクライアントの所有で自由にツール類をインストールできない。git や ruby 等が入っていないことが殆ど。&lt;/li&gt;
&lt;li&gt;web サーバー2台の db サーバー1台という小規模な構成が殆ど。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの条件に見合うようなデプロイツールを探して、色々情報を集めた。&lt;br /&gt;
特に参考になったのはこのページ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/naoya/20130118/1358477523&#34;&gt;開発メモ#1 : Cinnamon によるデプロイ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして、最終的には以下の様な理由で自作することにした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano は複雑そう。また、php のアプリで ruby のツールを使いたくなかった。&lt;/li&gt;
&lt;li&gt;fabric も検討したが、デザイナー含めた他のメンバーに homebrew や pip 等のインストール作業をさせるのがハードルだと感じた。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; というシェルスクリプトのデプロイツールを発見し、インストールが楽なこととシンプルな使い方がとても良いと感じた。&lt;br /&gt;
&lt;a href=&#34;http://qiita.com/futoase/items/c2ac39cfe28813b79bc4&#34;&gt;【個人メモ】デプロイするためにdeployを使ってみる&lt;/a&gt;&lt;br /&gt;
しかし、デプロイ先サーバーでの git インストールが必須な点と、複数台のホストに対して実行出来ない点が自分の目的とそぐわなかった。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上から、&lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; をベースに、殆どの unix マシンで使用可能な rsync 使ったツールを作成することにした。&lt;/p&gt;

&lt;p&gt;I wanted simple deployment tool suitable for my work.&lt;br /&gt;
My work is like&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;making php applications that are outsourced from various clients.&lt;/li&gt;
&lt;li&gt;Production servers are properties of clients, and softwares like git or ruby are rarely installed in them.&lt;br /&gt;
And also I am not permitted to install softwares.&lt;/li&gt;
&lt;li&gt;Server cluster is consisted of 2 web servers and 1 database server in most cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I started searching tools to match these conditions.&lt;br /&gt;
But I eventually decide to make my own one after a while surfing the web.&lt;br /&gt;
Because&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;capistrano seemed to be too complicated.&lt;/li&gt;
&lt;li&gt;fabric seemed much better than capistrano, but I thought it was still hard for my team to install homebrew or pip things.&lt;/li&gt;
&lt;li&gt;I found &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt; on github.&lt;br /&gt;
that&amp;rsquo;s cool deployment tool because installation and usage were very simpler than others.&lt;br /&gt;
But it requires git to be installed in deployment servers and doesn&amp;rsquo;t support deployment to multiple hosts.&lt;br /&gt;
That didn&amp;rsquo;t match my purpose.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So I decided to make my own one based on &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;br /&gt;
Thank you, &lt;a href=&#34;https://github.com/tj/deploy&#34;&gt;deploy&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-it-is-like-ryogoku:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;What it is like - ryogoku&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yutaf/ryogoku&#34;&gt;https://github.com/yutaf/ryogoku&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;installation:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Installation&lt;/h3&gt;

&lt;p&gt;Clone the repository from github, and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;how-it-works:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;How it works&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://yutaf.github.io/images/ryogoku-01.png&#34; class=&#34;image&#34;&gt;&lt;/p&gt;

&lt;h3 id=&#34;configuration:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ryogoku.conf&lt;/code&gt; を git レポジトリルートに作成し、以下の様な内容を書く。&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;ryogoku.conf&lt;/code&gt; at the git repository root.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[prod]
user rob
host 128.199.170.128 128.199.244.193
path /var/www/html
ref master
pre-rsync ./bin/pre-rsync
post-deploy /var/www/html/bin/update.sh &amp;amp;&amp;amp; /var/www/html/bin/update.prod.sh
umask 002
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;内容について簡単に説明すると、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デプロイ先は&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; はデプロイする git のリビジョンを指定&lt;br /&gt;
コマンドライン引数での指定も可能で、その場合はコマンドライン引数の値が優先される。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; は rsync を行う前に実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; は rsync を行ったあとに実行するコマンド&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; はファイルパーミッションを設定する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What directives in this configuration file means are&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deploying to&lt;br /&gt;
&lt;code&gt;rob@128.199.170.128:/var/www/html&lt;/code&gt; &lt;code&gt;rob@128.199.244.193:/var/www/html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref&lt;/code&gt; is the git revision to be deployed.&lt;br /&gt;
This value can also be set by command line argument, which is prior to config one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pre-rsync&lt;/code&gt; defines commands that are executed before rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;post-deploy&lt;/code&gt; defines commands that are executed after rsync.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;umask&lt;/code&gt; defines the file permissions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;execution:a243d8c3cf1cd7d968aa0a338320bf50&#34;&gt;Execution&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これで、master リビジョンが prod で指定したホストにデプロイされる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;master&lt;/code&gt; revision is deployed to the hosts defined in &lt;code&gt;prod&lt;/code&gt; section by this command.&lt;/p&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;git リビジョンを指定する場合は、コマンドラインの引数に渡す。&lt;/p&gt;

&lt;p&gt;If you want to deploy specific revision, you can pass an argument to command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod HEAD^^
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod b7ea7b3
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod 1.1.2
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ ryogoku prod develop
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>phpbrew memo</title>
      <link>http://yutaf.github.io/phpbrew-memo/</link>
      <pubDate>Tue, 17 Feb 2015 12:32:23 +0900</pubDate>
      
      <guid>http://yutaf.github.io/phpbrew-memo/</guid>
      <description>

&lt;p&gt;ローカル開発環境に phpenv + php-build を使っていたが、&lt;a href=&#34;https://github.com/phpbrew/phpbrew&#34;&gt;phpbrew&lt;/a&gt; のほうが簡単そうだったので移行した。&lt;/p&gt;

&lt;h3 id=&#34;environment:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;environment&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;osx 10.9.5&lt;/li&gt;
&lt;li&gt;Apache/2.2.29&lt;/li&gt;
&lt;li&gt;mysql 5.6.15&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;メリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;メリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;apache の php モジュールをバージョン毎に保存してくれる。&lt;/li&gt;
&lt;li&gt;configure オプションのコンパイルが楽になる（特にosx）

&lt;ul&gt;
&lt;li&gt;pcre&lt;/li&gt;
&lt;li&gt;&amp;ndash;enable-intl&lt;br /&gt;
など。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;デメリット:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;デメリット&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;使用するのに php5.3 以上が必要&lt;/li&gt;
&lt;li&gt;configure option を variants という独自の仕組みで指定する。&lt;/li&gt;
&lt;li&gt;php のバージョン切り替えで挙動が不安定な時がある&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;requirement:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;Requirement&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Requirement&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Requirement&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;phpbrew を利用するには php が必要。&lt;br /&gt;
osx はデフォルトで php がインストールされているので、osx ユーザーにはいいと思う。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;インストール&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
$ chmod +x phpbrew
$ mv phpbrew /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configure-option-の設定と-php-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;configure option の設定と php のインストール&lt;/h2&gt;

&lt;p&gt;phpbrew には &lt;code&gt;variants&lt;/code&gt; という独自の configure option の指定方法がある。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +pdo +mysql +pgsql +apxs2=/usr/bin/apxs2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants の一覧は以下のコマンドで確認可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew variants
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;variants を使うと、configure オプションによるビルドの失敗を上手く補ってくれるメリットがある。&lt;br /&gt;
例えば、&lt;code&gt;pcre&lt;/code&gt; オプションは以下の様な失敗をしやすい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;php の cli で動く pcre と apache モジュールで動く pcre のバージョンが違う&lt;/li&gt;
&lt;li&gt;apache に同梱された pcre がリンクされて、そのバージョンが古くてまともに動かない&lt;/li&gt;
&lt;li&gt;pcre ライブラリを指定しても、正しくリンクされない(個人的には osx でありました)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果として、&lt;code&gt;preg_replace&lt;/code&gt; 等、preg 系関数がまともに動かなくなってしまうことがある。&lt;/p&gt;

&lt;p&gt;しかし、この variants を使って pcre を指定すれば、apache モジュールと php cli で同じバージョンのちゃんと動く pcre ライブラリが入る。&lt;br /&gt;
これはかなりありがたい。&lt;br /&gt;
&lt;br&gt;
&lt;code&gt;--enable-intl&lt;/code&gt; もlinux に比べて osx では php のビルドがまともにいかないことが多いが、それもうまく補ってくれる。&lt;br /&gt;
&lt;br&gt;
ちなみに、&lt;code&gt;--&lt;/code&gt; に続けて書けば通常の configure option の記述も可能。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.10 +mysql +sqlite -- \
    --enable-ftp --apxs2=/opt/local/apache2/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ファイルによる-variants-の設定:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;ファイルによる variants の設定&lt;/h3&gt;

&lt;p&gt;yamlファイルで独自の variants を設定できる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Setting-up-Configuration&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;config.yaml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml:config.yaml&#34;&gt;variants:
  dev:
    bcmath:
    mbstring:
    intl:
    icu:
      - --with-icu-dir=/usr/local/opt/icu4c
    gettext:
      - --with-gettext=/usr/local/opt/gettext
    pcre:
    readline:
    xml:
      - --with-libxml-dir=/usr/local/opt/libxml2
    soap:
    zlib:
      - --with-zlib=/usr/local/opt/zlib
      - --with-zlib-dir=/usr/local/opt/zlib
    gd:
      - --with-gd
      - --with-jpeg-dir=/usr/local/opt/jpeg
      - --with-png-dir=/usr/local/opt/libpng
      - --with-freetype-dir=/usr/local/opt/freetype
      - --enable-gd-native-ttf
      - --enable-gd-jis-conv
    openssl:
    mcrypt:
    curl:
    mysql:
    pdo:
    my-exif:
      - --enable-exif
    my-config-file-path:
      - --with-config-file-path=/Users/yutaf/Sync/www/php.ini
extensions:
  dev:
    xdebug: stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;yamlファイルを作成後、以下のコマンドを実行する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew init -c=/path/to/config.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ファイルに記述されている &lt;code&gt;+dev&lt;/code&gt; variants を使用できるようになる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;個人的ベストプラクティス:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;個人的ベストプラクティス&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew -d install 5.4.36 +neutral +apxs2=/opt/apache2.2.29/bin/apxs +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;+neutral&lt;/code&gt; を指定しないと &lt;code&gt;--disable-all&lt;/code&gt; 等のオプションが自動的に設定される。&lt;br /&gt;
&lt;code&gt;--disable-all&lt;/code&gt; は phpのデフォルトで有効な json や xml モジュール等が無効になるので、これらの関数が使用できなくなる。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&#39;+apxs2&#39;&lt;/code&gt; は apache の php モジュールをバージョン毎に管理する為に必須(後述)。&lt;/p&gt;

&lt;h2 id=&#34;extension-のインストール:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;extension のインストール&lt;/h2&gt;

&lt;p&gt;xdebug などの extension も yaml ファイル に独自の variants を記述してインストールできる。&lt;br /&gt;
（上のyaml を参照。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew ext install +dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;php-のバージョン切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;php のバージョン切り替え&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew switch php-5.4.36
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apache-のphpモジュール切り替え:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;apache のphpモジュール切り替え&lt;/h2&gt;

&lt;p&gt;variants の &lt;code&gt;+apxs2&lt;/code&gt; を設定すると各バージョンごとにモジュールを保存し、
httpd.conf に &lt;code&gt;LoadModule php5_module ...&lt;/code&gt; の記述がされる。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&#34;&gt;https://github.com/phpbrew/phpbrew/wiki/Cookbook#apache2-support&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ただし、その際 conf と modules フォルダのパーミッションを 777 に変更するよう言われる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ phpbrew install 5.3.29 +apxs2=/opt/apache2.2.29/bin/apxs
$ phpbrew install 5.4.36 +apxs2=/opt/apache2.2.29/bin/apxs
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;作成されるモジュール&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;/opt/apache2.2.29/modules/libphp5.3.29.so
/opt/apache2.2.29/modules/libphp5.4.36.so

&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;httpd.conf&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを切り替えるには httpd.conf で使用するバージョンのモジュール以外をコメントアウトして apache を再起動する&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apacheconf:/opt/apache2.2.29/conf/httpd.conf&#34;&gt;...

LoadModule rewrite_module modules/mod_rewrite.so
LoadModule php5_module        modules/libphp5.4.36.so
#LoadModule php5_module        modules/libphp5.3.29.so

...
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apachectl graceful
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;感想:a243102e0194a1a90c0e0b12d72d5bbe&#34;&gt;感想&lt;/h2&gt;

&lt;p&gt;気持ち悪い所も多いが、osx でphpをビルドするならこれが一番楽な気がした。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>